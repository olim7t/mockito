defineStructure(
"BridgeMethodPuzzleTest",function(factory){with(factory) { typeTable(["org.mockito.Mockito","cl"],["org.mockito.util.ExtraMatchers","cl"],["org.junit.Test","an"],["org.mockito.TestBase","cl"],["org.mockitousage.binding.BridgeMethodPuzzleTest","cl"],["java.lang.SuppressWarnings","an"],["org.mockitousage.binding.BridgeMethodPuzzleTest$Super","cl"],["org.mockitousage.binding.BridgeMethodPuzzleTest$Sub","cl"],["java.lang.Object","cl"],["java.lang.String","cl"],["java.lang.Override","an"],["java.lang.Exception","cl"],["junit.framework.Assert","cl"],["org.mockito.util.Assertor","it"],["java.lang.Class","cl"]),methodTable([6,"say",[8],"me"],[7,"say",[9],"me"],[4,"setMockWithDownCast",[6],"me"],[4,"say",[9],"me"],[4,"shouldHaveBridgeMethod",[],"me"],[7,"Sub",[],"co"],[12,"assertEquals",[9,9],"st me"],[3,"assertThat",[8,13],"me"],[1,"hasBridgeMethod",[9],"st me"],[4,"shouldVerifyCorrectlyWhenBridgeMethodCalled",[],"me"],[0,"mock",[14],"st me"],[0,"verify",[8],"st me"]),localVariableTable(["t","~Super-say(java.lang.Object)-t"],["t","~Sub-say(java.lang.String)-t"],["mock","setMockWithDownCast(org.mockitousage.binding.BridgeMethodPuzzleTest.Super)-mock"],["string","say(java.lang.String)-string"],["s","shouldHaveBridgeMethod()-s"],["s","shouldVerifyCorrectlyWhenBridgeMethodCalled()-s"])
return classDef(O("/*",nl," * Copyright (c) 2007 Mockito contributors",nl," * This program is made available under the terms of the MIT License.",nl," */"),nl,pa," org.mockitousage.binding;",nl,nl,ip,_,s," org.mockito.",T(0),".*;",nl,ip,_,s," org.mockito.util.",T(1),".*;",nl,nl,ip," org.junit.",T(2),";",nl,ip," org.mockito.",T(3),";",nl,nl,O("/**",nl," * Bridge method is generated by compiler when erasure in parent class is",nl," * different. When is different then it means that in runtime we will have",nl," * overloading rather than overridding Therefore the compiler generates bridge",nl," * method in Subclass so that erasures are the same, signatures of methods match",nl," * and overridding is ON.",nl," */"),nl,C(4,[],$("@",T(5),P(L("\"unchecked\"")),nl,pu,_,c,_,I("BridgeMethodPuzzleTest"),_,ex,_,T(3),_,B(nl,w(4),nl,w(4),C(6,[7],$(pi,_,c,_,I("Super"),"&lt;T> ",B(nl,w(8),M(0,[],[1],$(pu,_,T(9),_,I("say"),P(V(0,$("T ",I("t")))),_,B(nl,w(12),r,_,L("\"Super says: \"")," + ",W(0),";",nl,w(8)))),nl,w(4)))),nl,w(4),nl,w(4),C(7,[],$(pi,_,c,_,I("Sub"),_,ex,_,T(6),"&lt;",T(9),"> ",B(nl,w(8),M(1,[0],[],$("@",T(10),nl,w(8),pu,_,T(9),_,I("say"),P(V(1,$(T(9),_,I("t")))),"  ",B(nl,w(12),r,_,L("\"Dummy says: \"")," + ",W(1),";",nl,w(8)))),nl,w(4)))),nl,nl,w(4),F(T(6),_,I("mock"),";"),nl,w(4),nl,w(4),M(2,[],[],$(pi,_,v,_,I("setMockWithDownCast"),P(V(2,$(T(6),_,I("mock")))),_,B(nl,w(8),t,".",G(4,"fi","mock")," = ",W(2),";",nl,w(4)))),nl,w(4),nl,w(4),M(3,[],[],$(pi,_,v,_,I("say"),P(V(3,$(T(9),_,I("string")))),_,B(nl,w(8),G(4,"fi","mock"),".",N(0),P(W(3)),";",nl,w(4)))),nl,w(4),nl,w(4),M(4,[],[],$("@",T(2),nl,w(4),pu,_,v,_,I("shouldHaveBridgeMethod"),P(),_,ts,_,T(11),_,B(nl,w(8),V(4,$(T(6),_,I("s")," = ",n,_,N(5),P(),";")),nl,w(8),nl,w(8),N(6),P(L("\"Dummy says: Hello\""),", ",W(4),".",N(0),P(L("\"Hello\""))),";",nl,w(8),nl,w(8),N(7),P(T(7),".",c,", ",N(8),P(L("\"say\""))),";",nl,w(8),N(7),P(W(4),", ",N(8),P(L("\"say\""))),";",nl,w(4)))),nl,w(4),nl,w(4),M(9,[],[],$("@",T(2),nl,w(4),pu,_,v,_,I("shouldVerifyCorrectlyWhenBridgeMethodCalled"),P(),_,ts,_,T(11),_,B(nl,w(8),O("//Super has following erasure: say(Object) which differs from Dummy.say(String)"),nl,w(8),O("//mock has to detect it and do the super.say()"),nl,w(8),O("//see MockFactory.java"),nl,w(8),V(5,$(T(7),_,I("s")," = ",N(10),P(T(7),".",c),";")),nl,w(8),N(2),P(W(5)),";",nl,w(8),N(3),P(L("\"Hello\"")),";",nl,w(8),nl,w(8),N(11),P(W(5)),".",N(1),P(L("\"Hello\"")),";",nl,w(4)))),nl))));}});
defineStructure(
"MockitoAnnotations",function(factory){with(factory) { typeTable(["java.lang.annotation.ElementType","en"],["java.lang.annotation.Retention","an"],["java.lang.annotation.RetentionPolicy","en"],["java.lang.annotation.Target","an"],["java.lang.reflect.Field","cl"],["org.mockito.exceptions.base.MockitoException","cl"],["org.mockito.MockitoAnnotations","cl"],["org.mockito.MockitoAnnotations$Mock","st an"],["java.lang.Object","cl"],["java.lang.String","cl"],["java.lang.Class","cl"],["java.lang.reflect.AccessibleObject","cl"],["org.mockito.Mockito","cl"],["java.lang.IllegalAccessException","cl"],["java.lang.Throwable","cl"]),methodTable([6,"initMocks",[8],"st me"],[5,"MockitoException",[9],"co"],[8,"getClass",[],"me"],[6,"scan",[8,10],"st me"],[10,"getSuperclass",[],"me"],[10,"getDeclaredFields",[],"me"],[11,"isAnnotationPresent",[10],"me"],[11,"isAccessible",[],"me"],[11,"setAccessible",["boolean"],"me"],[4,"set",[8,8],"me"],[12,"mock",[10,9],"st me"],[4,"getType",[],"me"],[4,"getName",[],"me"],[5,"MockitoException",[9,14],"co"]),localVariableTable(["testClass","initMocks(java.lang.Object)-testClass"],["clazz","initMocks(java.lang.Object)-clazz"],["testClass","scan(java.lang.Object,java.lang.Class)-testClass"],["clazz","scan(java.lang.Object,java.lang.Class)-clazz"],["fields","scan(java.lang.Object,java.lang.Class)-fields"],["f","scan(java.lang.Object,java.lang.Class)-f"],["e","scan(java.lang.Object,java.lang.Class)-e"])
return classDef(O("/*",nl," * Copyright (c) 2007 Mockito contributors",nl," * This program is made available under the terms of the MIT License.",nl," */"),nl,pa," org.mockito;",nl,nl,ip,_,s," java.lang.annotation.",T(0),".*;",nl,nl,ip," java.lang.annotation.",T(1),";",nl,ip," java.lang.annotation.",T(2),";",nl,ip," java.lang.annotation.",T(3),";",nl,ip," java.lang.reflect.",T(4),";",nl,nl,ip," org.mockito.exceptions.base.",T(5),";",nl,nl,O("/**",nl," * &lt;ul>",nl," * &lt;li>Allows shorthand mock creation.&lt;/li> ",nl," * &lt;li>Minimizes repetitive mock creation code.&lt;/li> ",nl," * &lt;li>Makes the test class more readable.&lt;/li>",nl," * &lt;li>Makes the verification error easier to read because &lt;b>field name&lt;/b> is used to identify the mock.&lt;/li>",nl," * &lt;/ul>",nl," * ",nl," * &lt;pre>",nl," *   public class ArticleManagerTest extends SampleBaseTestCase { ",nl," *",w(5),nl," *",w(7),"&amp;#064;Mock private ArticleCalculator calculator;",nl," *",w(7),"&amp;#064;Mock private ArticleDatabase database;",nl," *",w(7),"&amp;#064;Mock private UserProvider userProvider;",nl," *",w(5),nl," *",w(7),"private ArticleManager manager;",nl," *",w(5),nl," *",w(7),"&amp;#064;Before public void setup() {",nl," *",w(11),"manager = new ArticleManager(userProvider, database, calculator);",nl," *",w(7),"}",nl," *   }",nl," *   ",nl," *   public class SampleBaseTestCase {",nl," *   ",nl," *",w(7),"&amp;#064;Before public void initMocks() {",nl," *",w(11),"MockitoAnnotations.initMocks(this);",nl," *",w(7),"}",nl," *   }",nl," * &lt;/pre>",nl," * ",nl," * &lt;b>&lt;code>MockitoAnnotations.initMocks(this)&lt;/code>&lt;/b> method has to called to initialize annotated mocks.",nl," * &lt;p>",nl," * In above example, &lt;code>initMocks()&lt;/code> is called in &amp;#064;Before (JUnit4) method of test's base class. ",nl," * You can also put it in your JUnit4 runner (&amp;#064;RunWith).",nl," * For JUnit3 &lt;code>initMocks()&lt;/code> can go to &lt;code>setup()&lt;/code> method of a base class.",nl," * &lt;p>",nl," * How to implement mockito junit runner? See examples from mockito/test/org/mockitousage/examples/junitrunner subpackage. ",nl," * You may want to check out the project from svn repository to easily browse Mockito's test code.",nl," */"),nl,C(6,[],$(pu,_,c,_,I("MockitoAnnotations"),_,B(nl,nl,w(4),O("/**",nl,w(5),"* Allows shorthand mock creation, see examples in javadoc for {@link MockitoAnnotations} class.",nl,w(5),"*/"),nl,w(4),C(7,[],$("@",T(3),P(_,B(_,G(0,"st ec","FIELD"),_)),nl,w(4),"@",T(1),P(T(2),".",G(2,"st ec","RUNTIME")),nl,w(4),pu," @",it,_,I("Mock"),_,B())),nl,w(4),nl,w(4),O("/**",nl,w(5),"* Initializes objects annotated with &amp;#064;Mock for given testClass.",nl,w(5),"* See examples in javadoc for {@link MockitoAnnotations} class.",nl,w(5),"*/"),nl,w(4),M(0,[],[],$(pu,_,s,_,v,_,I("initMocks"),P(V(0,$(T(8),_,I("testClass")))),_,B(nl,w(8),i,_,P(W(0)," == ",L("null")),_,B(nl,w(12),tw,_,n,_,N(1),P(L("\"testClass cannot be null. For info how to use @Mock annotations see examples in javadoc for MockitoAnnotations class\"")),";",nl,w(8)),nl,w(8),nl,w(8),V(1,$(T(10),"&lt;?> ",I("clazz")," = ",W(0),".",N(2),P(),";")),nl,w(8),wh,_,P(W(1)," != ",T(8),".",c),_,B(nl,w(12),N(3),P(W(0),", ",W(1)),";",nl,w(12),W(1)," = ",W(1),".",N(4),P(),";",nl,w(8)),nl,w(4)))),nl,nl,w(4),M(3,[],[],$(pi,_,s,_,v,_,I("scan"),P(V(2,$(T(8),_,I("testClass"))),", ",V(3,$(T(10),"&lt;?> ",I("clazz")))),_,B(nl,w(8),V(4,$(T(4),"[] ",I("fields")," = ",W(3),".",N(5),P(),";")),nl,w(8),fo,_,P(V(5,$(T(4),_,I("f")))," : ",W(4)),_,B(nl,w(12),i,_,P(W(5),".",N(6),P(T(7),".",c)),_,B(nl,w(16),b," wasAccessible = ",W(5),".",N(7),P(),";",nl,w(16),W(5),".",N(8),P(L("true")),";",nl,w(16),tr,_,B(nl,w(20),W(5),".",N(9),P(W(2),", ",T(12),".",N(10),P(W(5),".",N(11),P(),", ",W(5),".",N(12),P())),";",nl,w(16)),_,ct,_,P(V(6,$(T(13),_,I("e")))),_,B(nl,w(20),tw,_,n,_,N(13),P(L("\"Problems initiating mocks annotated with @Mock\""),", ",W(6)),";",nl,w(16)),_,fn,_,B(nl,w(20),W(5),".",N(8),P("wasAccessible"),";",nl,w(16)),nl,w(12)),nl,w(8)),nl,w(4)))),nl))));}});
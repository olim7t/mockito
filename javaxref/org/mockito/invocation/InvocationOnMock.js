defineStructure(
"InvocationOnMock",function(factory){with(factory) { typeTable(["java.lang.reflect.Method","cl"],["org.mockito.invocation.InvocationOnMock","it"],["org.mockito.internal.invocation.Invocation","cl"],["java.lang.Object","cl"]),methodTable([1,"getMock",[],"me"],[1,"getMethod",[],"me"],[1,"getArguments",[],"me"]),localVariableTable()
return classDef(O("/*",nl," * Copyright (c) 2007 Mockito contributors",nl," * This program is made available under the terms of the MIT License.",nl," */"),nl,pa," org.mockito.invocation;",nl,nl,ip," java.lang.reflect.",T(0),";",nl,nl,O("/**",nl," * An invocation on a mock",nl," * &lt;p>",nl," * A placeholder for mock, the method that was called and the arguments that were passed.",nl," */"),nl,C(1,[2],$(pu,_,it,_,I("InvocationOnMock"),_,B(nl,nl,w(4),O("/**",nl,w(5),"* returns the mock object ",nl,w(5),"* ",nl,w(5),"* @return mock object",nl,w(5),"*/"),nl,w(4),M(0,[],[],$(T(3),_,I("getMock"),P(),";")),nl,nl,w(4),O("/**",nl,w(5),"* returns the method",nl,w(5),"* ",nl,w(5),"* @return method",nl,w(5),"*/"),nl,w(4),M(1,[],[],$(T(0),_,I("getMethod"),P(),";")),nl,nl,w(4),O("/**",nl,w(5),"* returns arguments passed to the method",nl,w(5),"* ",nl,w(5),"* @return arguments",nl,w(5),"*/"),nl,w(4),M(2,[],[],$(T(3),"[] ",I("getArguments"),P(),";")),nl))));}});
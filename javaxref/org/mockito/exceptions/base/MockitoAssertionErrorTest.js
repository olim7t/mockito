defineStructure(
"MockitoAssertionErrorTest",function(factory){with(factory) { typeTable(["org.junit.Test","an"],["org.mockito.TestBase","cl"],["org.mockito.exceptions.base.MockitoAssertionErrorTest","cl"],["org.mockito.exceptions.base.MockitoAssertionError","cl"],["java.lang.String","cl"],["junit.framework.Assert","cl"],["java.lang.StackTraceElement","cl"],["java.lang.Throwable","cl"]),methodTable([2,"throwIt",[],"me"],[3,"MockitoAssertionError",[4],"co"],[2,"shouldKeepUnfilteredStackTrace",[],"me"],[5,"fail",[],"st me"],[5,"assertEquals",[4,4],"st me"],[3,"getUnfilteredStackTrace",[],"me"],[6,"getMethodName",[],"me"],[2,"shouldNotInitCauseWhenCauseIsNull",[],"me"],[3,"MockitoAssertionError",[4,7],"co"]),localVariableTable(["e","shouldKeepUnfilteredStackTrace()-e"])
return classDef(O("/*",nl," * Copyright (c) 2007 Mockito contributors",nl," * This program is made available under the terms of the MIT License.",nl," */"),nl,pa," org.mockito.exceptions.base;",nl,nl,ip," org.junit.",T(0),";",nl,ip," org.mockito.",T(1),";",nl,nl,C(2,[],$(pu,_,c,_,I("MockitoAssertionErrorTest"),_,ex,_,T(1),_,B(nl,nl,w(4),M(0,[],[],$(pi,_,v,_,I("throwIt"),P(),_,B(nl,w(8),tw,_,n,_,N(1),P(L("\"boom\"")),";",nl,w(4)))),nl,w(4),nl,w(4),M(2,[],[],$("@",T(0),nl,w(4),pu,_,v,_,I("shouldKeepUnfilteredStackTrace"),P(),_,B(nl,w(8),tr,_,B(nl,w(12),N(0),P(),";",nl,w(12),N(3),P(),";",nl,w(8)),_,ct,_,P(V(0,$(T(3),_,I("e")))),_,B(nl,w(12),N(4),P(L("\"throwIt\""),", ",W(0),".",N(5),P(),"[",L("0"),"].",N(6),P()),";",nl,w(8)),nl,w(4)))),nl,w(4),nl,w(4),M(7,[],[],$("@",T(0),nl,w(4),pu,_,v,_,I("shouldNotInitCauseWhenCauseIsNull"),P(),_,B(nl,w(8),n,_,N(8),P(L("\"test\""),", ",L("null")),";",nl,w(4)))),nl))),nl);}});
defineStructure(
"StackTraceBuilder",function(factory){with(factory) { typeTable(["java.util.Arrays","cl"],["java.util.List","it"],["org.mockito.exceptions.base.StackTraceBuilder","cl"],["java.lang.String","cl"],["java.lang.StackTraceElement","cl"]),methodTable([2,"methods",["java.lang.String[]"],"me"],[2,"toStackTrace",[],"me"],[4,"StackTraceElement",[3,3,3,"int"],"co"],[2,"toStackTraceList",[],"me"],[0,"asList",["java.lang.Object[]"],"st me"]),localVariableTable(["methods","methods(java.lang.String[])-methods"],["trace","toStackTrace()-trace"])
return classDef(O("/*",nl," * Copyright (c) 2007 Mockito contributors",nl," * This program is made available under the terms of the MIT License.",nl," */"),nl,pa," org.mockito.exceptions.base;",nl,nl,ip," java.util.",T(0),";",nl,ip," java.util.",T(1),";",nl,nl,C(2,[],$(pu,_,c,_,I("StackTraceBuilder"),_,B(nl,w(4),nl,w(4),F(pi,_,T(3),"[] ",I("methods"),";"),nl,nl,w(4),M(0,[],[],$(pu,_,T(2),_,I("methods"),P(V(0,$(T(3)," ... ",I("methods")))),_,B(nl,w(8),t,".",G(2,"fi","methods")," = ",W(0),";",nl,w(8),r,_,t,";",nl,w(4)))),nl,nl,w(4),M(1,[],[],$(pu,_,T(4),"[] ",I("toStackTrace"),P(),_,B(nl,w(8),V(1,$(T(4),"[] ",I("trace")," = ",n,_,T(4),"[",G(2,"fi","methods"),".length];")),nl,w(8),nl,w(8),fo,_,P(j," i = ",L("0"),"; i &lt; ",G(2,"fi","methods"),".length; i++"),_,B(nl,w(12),W(1),"[i] = ",n,_,N(2),P(L("\"DummyClass\""),", ",G(2,"fi","methods"),"[i], ",L("\"DummyClass.java\""),", ",L("100")),";",nl,w(8)),nl,w(8),nl,w(8),r,_,W(1),";",nl,w(4)))),nl,nl,w(4),M(3,[],[],$(pu,_,T(1),"&lt;",T(4),"> ",I("toStackTraceList"),P(),_,B(nl,w(8),r,_,T(0),".",N(4),P(N(1),P()),";",nl,w(4)))),nl))),nl);}});
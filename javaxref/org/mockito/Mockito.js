defineStructure(
"Mockito",function(factory){with(factory) { typeTable(["java.util.Arrays","cl"],["org.mockito.exceptions.Reporter","cl"],["org.mockito.exceptions.misusing.NotAMockException","cl"],["org.mockito.internal.MockHandler","cl"],["org.mockito.internal.progress.MockingProgress","it"],["org.mockito.internal.progress.OngoingStubbing","it"],["org.mockito.internal.progress.ThreadSafeMockingProgress","cl"],["org.mockito.internal.progress.VerificationMode","it"],["org.mockito.internal.progress.VerificationModeImpl","cl"],["org.mockito.internal.stubbing.VoidMethodStubbable","it"],["org.mockito.internal.util.MockUtil","cl"],["org.mockito.Mockito","cl"],["org.mockito.Matchers","cl"],["java.lang.Class","cl"],["java.lang.String","cl"],["java.lang.Object","cl"],["java.lang.SuppressWarnings","an"],["org.mockito.InOrder","it"],["org.mockito.InOrderVerifier","cl"],["java.util.List","it"]),methodTable([1,"Reporter",[],"co"],[6,"ThreadSafeMockingProgress",[],"co"],[11,"mock",[13],"st me"],[10,"createMock",[13,14,4],"st me"],[11,"mock",[13,14],"st me"],[11,"stub",[15],"st me"],[4,"stubbingStarted",[],"me"],[4,"pullOngoingStubbing",[],"me"],[1,"missingMethodInvocation",[],"me"],[11,"verify",[15],"st me"],[11,"verify",[15,7],"st me"],[11,"times",["int"],"st me"],[10,"isMock",[15],"st me"],[1,"notAMockPassedToVerify",[],"me"],[4,"verificationStarted",[7],"me"],[11,"verifyNoMoreInteractions",["java.lang.Object[]"],"st me"],[11,"assertMocksNotEmpty",["java.lang.Object[]"],"st me"],[4,"validateState",[],"me"],[10,"getMockHandler",[15],"st me"],[3,"verifyNoMoreInteractions",[],"me"],[1,"notAMockPassedToVerifyNoMoreInteractions",[],"me"],[11,"verifyZeroInteractions",["java.lang.Object[]"],"st me"],[1,"mocksHaveToBePassedToVerifyNoMoreInteractions",[],"me"],[11,"stubVoid",[15],"st me"],[3,"voidMethodStubbable",[],"me"],[11,"inOrder",["java.lang.Object[]"],"st me"],[1,"mocksHaveToBePassedWhenCreatingInOrder",[],"me"],[1,"notAMockPassedWhenCreatingInOrder",[],"me"],[18,"InOrderVerifier",[19],"co"],[0,"asList",["java.lang.Object[]"],"st me"],[11,"atLeastOnce",[],"st me"],[8,"atLeastOnce",[],"st me"],[8,"times",["int"],"st me"],[11,"never",[],"st me"]),localVariableTable(["classToMock","mock(java.lang.Class)-classToMock"],["classToMock","mock(java.lang.Class,java.lang.String)-classToMock"],["name","mock(java.lang.Class,java.lang.String)-name"],["methodCall","stub(java.lang.Object)-methodCall"],["stubbable","stub(java.lang.Object)-stubbable"],["mock","verify(java.lang.Object)-mock"],["mock","verify(java.lang.Object,org.mockito.internal.progress.VerificationMode)-mock"],["mode","verify(java.lang.Object,org.mockito.internal.progress.VerificationMode)-mode"],["mocks","verifyNoMoreInteractions(java.lang.Object[])-mocks"],["mock","verifyNoMoreInteractions(java.lang.Object[])-mock"],["e","verifyNoMoreInteractions(java.lang.Object[])-e"],["mocks","verifyZeroInteractions(java.lang.Object[])-mocks"],["mocks","assertMocksNotEmpty(java.lang.Object[])-mocks"],["mock","stubVoid(java.lang.Object)-mock"],["handler","stubVoid(java.lang.Object)-handler"],["mocks","inOrder(java.lang.Object[])-mocks"],["mock","inOrder(java.lang.Object[])-mock"],["inOrderVerifier","inOrder(java.lang.Object[])-inOrderVerifier"])
return classDef(O("/*",nl," * Copyright (c) 2007 Mockito contributors",nl," * This program is made available under the terms of the MIT License.",nl," */"),nl,pa," org.mockito;",nl,nl,ip," java.util.",T(0),";",nl,nl,ip," org.mockito.exceptions.",T(1),";",nl,ip," org.mockito.exceptions.misusing.",T(2),";",nl,ip," org.mockito.internal.",T(3),";",nl,ip," org.mockito.internal.progress.",T(4),";",nl,ip," org.mockito.internal.progress.",T(5),";",nl,ip," org.mockito.internal.progress.",T(6),";",nl,ip," org.mockito.internal.progress.",T(7),";",nl,ip," org.mockito.internal.progress.",T(8),";",nl,ip," org.mockito.internal.stubbing.",T(9),";",nl,ip," org.mockito.internal.util.",T(10),";",nl,nl,O("/**",nl," * Enables mocks creation, verification and stubbing.",nl," * &lt;p>",nl," * Following examples mock List, because everyone knows its interface (methods like add(), get(), clear() will be used). ",nl," * &lt;br>You probably wouldn't mock List class 'in real'.  ",nl," * ",nl," * &lt;h3>Let's verify some behaviour!&lt;/h3>",nl," * ",nl," * &lt;pre>",nl," * //Let's import Mockito statically so that code looks clearer",nl," * import static org.mockito.Mockito.*;",nl," * ",nl," * //mock creation",nl," * List mockedList = mock(List.class);",nl," * ",nl," * //using mock object",nl," * mockedList.add(\"one\");",nl," * mockedList.clear();",nl," * ",nl," * //verification",nl," * verify(mockedList).add(\"one\");",nl," * verify(mockedList).clear();",nl," * &lt;/pre>",nl," * ",nl," * &lt;p>",nl," * Once created, mock will remember all invocations. Then you can",nl," * selectively verify whatever interaction you are interested in.",nl," * ",nl," * &lt;h3>How about some stubbing?&lt;/h3>",nl," * ",nl," * &lt;pre>",nl," * //You can mock concrete classes, not only interfaces",nl," * LinkedList mockedList = mock(LinkedList.class);",nl," * ",nl," * //stubbing",nl," * stub(mockedList.get(0)).toReturn(\"first\");",nl," * stub(mockedList.get(1)).toThrow(new RuntimeException());",nl," * ",nl," * //following prints \"first\"",nl," * System.out.println(mockedList.get(0));",nl," * ",nl," * //following throws runtime exception",nl," * System.out.println(mockedList.get(1));",nl," * ",nl," * //following prints \"null\" because get(999) was not stubbed",nl," * System.out.println(mockedList.get(999));",nl," * ",nl," * //if you really want you can still verify stubbed invocation. In most cases it's not necessary, though. ",nl," * verify(mockedList).get(0);",nl," * &lt;/pre>",nl," * ",nl," * &lt;ul>",nl," * &lt;li>",nl," * By default, for all methods that return value, mock returns null,",nl," * an empty collection or appropriate primitive/primitive wrapper value ",nl," * (e.g: 0, false, ... for int/Integer, boolean/Boolean, ...).",nl," * &lt;/li>",nl," * &lt;li>",nl," * Stubbing can be overridden: for example common stubbing can go to fixture setup",nl," * but test methods can override it.",nl," * &lt;/li>",nl," * &lt;li>",nl," * Once stubbed, mocked method will always return stubbed value regardless of how many times it is called.",nl," * &lt;/li>",nl," * &lt;li>",nl," * Last stubbing is more important - when you stubbed the same method with the same arguments many times.",nl," * &lt;/li>",nl," * &lt;li>",nl," * Although it's possible to verify stubbed methods it's a good pattern to focus on testing that stubbed value is used correctly.",nl," * &lt;/li> ",nl," * &lt;/ul>",nl," * ",nl," * &lt;h3>Argument matchers&lt;/h3>",nl," * ",nl," * &lt;pre>",nl," *  //stubbing using built-in anyInt() argument matcher",nl," *  stub(mockedList.get(anyInt())).toReturn(\"element\");",nl," *  ",nl," *  //stubbing using hamcrest (let's say isValid() returns your own hamcrest matcher):",nl," *  stub(mockedList.contains(argThat(isValid()))).toReturn(\"element\");",nl," *  ",nl," *  //following prints \"element\"",nl," *  System.out.println(mockedList.get(999));",nl," *  ",nl," *  //&lt;b>you can also verify using argument matcher&lt;/b>",nl," *  verify(mockedList).get(anyInt());",nl," * &lt;/pre>",nl," * ",nl," * &lt;p>",nl," * Argument matchers allow flexible verification or stubbing. ",nl," * See the &lt;b>whole library of&lt;/b> {@link Matchers} including examples of &lt;b>custom argument matchers / hamcrest matchers&lt;/b>. ",nl," * &lt;p>",nl," * &lt;b>Warning:&lt;/b>",nl," * &lt;p>",nl," * If you are using argument matchers, &lt;b>all arguments&lt;/b> have to be provided by matchers.",nl," * &lt;p>",nl," * E.g: (example shows verification but the same applies to stubbing):",nl," * &lt;pre>",nl," *   verify(mock).someMethod(anyInt(), anyString(), &lt;b>eq(\"third argument\")&lt;/b>);",nl," *   //above is correct - eq() is also an argument matcher",nl," *   ",nl," *   verify(mock).someMethod(anyInt(), anyString(), &lt;b>\"third argument\"&lt;/b>);",nl," *   //above is incorrect - exception will be thrown because third argument is given without argument matcher.",nl," * &lt;/pre>",nl," * ",nl," * &lt;h3>Verifying exact number of invocations / at least once / never&lt;/h3>",nl," *",nl," *&lt;pre>",nl," *  //using mock ",nl," *  mockedList.add(\"once\");",nl," *  ",nl," *  mockedList.add(\"twice\");",nl," *  mockedList.add(\"twice\");",nl," *  ",nl," *  mockedList.add(\"three times\");",nl," *  mockedList.add(\"three times\");",nl," *  mockedList.add(\"three times\");",nl," *  ",nl," *  //following two verifications work exactly the same - times(1) is used by default",nl," *  verify(mockedList).add(\"once\");",nl," *  verify(mockedList, times(1)).add(\"once\");",nl," *  ",nl," *  //exact number of invocations verification",nl," *  verify(mockedList, times(2)).add(\"twice\");",nl," *  verify(mockedList, times(3)).add(\"three times\");",nl," *  ",nl," *  //verification using never(). never() is an alias to times(0)",nl," *  verify(mockedList, never()).add(\"never happened\");",nl," *  ",nl," *  //verification using atLeastOnce()",nl," *  verify(mockedList, atLeastOnce()).add(\"three times\");",nl," *  ",nl," * &lt;/pre>",nl," * ",nl," * &lt;p>",nl," * &lt;b>times(1) is the default.&lt;/b> Therefore using times(1) explicitly can be omitted.",nl," * ",nl," * &lt;h3>Stubbing void methods with an exceptions&lt;/h3>",nl," * ",nl," * &lt;pre>",nl," *   stubVoid(mockedList).toThrow(new RuntimeException()).on().clear();",nl," *   ",nl," *   //following throws exception",nl," *   mockedList.clear();",nl," * &lt;/pre>",nl," *",nl," * &lt;h3>Verification in order&lt;/h3>",nl," * ",nl," * &lt;pre>",nl," *   List firstMock = mock(List.class);",nl," *   List secondMock = mock(List.class);",nl," *   ",nl," *   //using mocks",nl," *   firstMock.add(\"was called first\");",nl," *   secondMock.add(\"was called second\");",nl," *   ",nl," *   //create inOrder object passing any mocks that need to be verified in order",nl," *   InOrder inOrder = inOrder(firstMock, secondMock);",nl," *   ",nl," *   //following will make sure that firstMock was called before secondMock",nl," *   inOrder.verify(firstMock).add(\"was called first\");",nl," *   inOrder.verify(secondMock).add(\"was called second\");",nl," * &lt;/pre>",nl," * ",nl," * Verification in order is flexible - &lt;b>you don't have to verify all interactions&lt;/b> one-by-one",nl," * but only those that you are interested in testing in order. ",nl," * &lt;p>",nl," * Also, you can create InOrder object passing only mocks that relevant for in-order verification.  ",nl," *",nl," * &lt;h3>Making sure interaction(s) never happened on mock&lt;/h3>",nl," * ",nl," * &lt;pre>",nl," *   //using mocks - only mockOne is interacted",nl," *   mockOne.add(\"one\");",nl," *   ",nl," *   //ordinary verification",nl," *   verify(mockOne).add(\"one\");",nl," *   ",nl," *   //verify that method was never called on a mock",nl," *   verify(mockOne, never()).add(\"two\"); ",nl," *   ",nl," *   //verify that other mocks were not interacted",nl," *   verifyZeroInteractions(mockTwo, mockThree);",nl," *   ",nl," *   //following works exactly the same as above",nl," *   verifyNoMoreInteractions(mockTwo, mockThree);",nl," * &lt;/pre>",nl," *",nl," * See more {@link Mockito#verifyNoMoreInteractions}",nl," * ",nl," * &lt;p>",nl," * Instead of verifyZeroInteractions() you can call verifyNoMoreInteractions() but ",nl," * the first one is more explicit and can read better.",nl," *",nl," * &lt;h3>Finding redundant invocations&lt;/h3>",nl," * ",nl," * &lt;pre>",nl," *   //using mocks",nl," *   mockedList.add(\"one\");",nl," *   mockedList.add(\"two\");",nl," *   ",nl," *   verify(mockedList).add(\"one\");",nl," *   ",nl," *   //following verification will fail ",nl," *   verifyNoMoreInteractions(mockedList);",nl," * &lt;/pre>",nl," * ",nl," * Remember that usually it's not necessary to call verifyNoMoreInteractions() all the time.",nl," * See also {@link Mockito#never()} - it is more explicit and communicates an intent well. ",nl," * &lt;p>",nl," * ",nl," * &lt;h3>Shorthand for mocks creation - &amp;#064;Mock annotation&lt;/h3>",nl," * ",nl," * &lt;ul>",nl," * &lt;li>Minimizes repetitive mock creation code.&lt;/li> ",nl," * &lt;li>Makes the test class more readable.&lt;/li>",nl," * &lt;li>Makes the verification error easier to read because &lt;b>field name&lt;/b> is used to identify the mock.&lt;/li>",nl," * &lt;/ul>",nl," * ",nl," * &lt;pre>",nl," *   public class ArticleManagerTest { ",nl," *",w(5),nl," *",w(7),"&amp;#064;Mock private ArticleCalculator calculator;",nl," *",w(7),"&amp;#064;Mock private ArticleDatabase database;",nl," *",w(7),"&amp;#064;Mock private UserProvider userProvider;",nl," *",w(5),nl," *",w(7),"private ArticleManager manager;",nl," * &lt;/pre>",nl," * ",nl," * &lt;b>Important!&lt;/b> This needs to be somewhere in the base class or a test runner:",nl," *   ",nl," * &lt;pre>",nl," *   MockitoAnnotations.initMocks(testClass);",nl," * &lt;/pre>",nl," * ",nl," * Examples how to write a junit test runner are in Mockito test code (mockito/test/org/mockitousage/examples/junitrunner package);",nl," * &lt;p>",nl," * Read more here: {@link MockitoAnnotations}",nl," */"),nl,C(11,[],$(pu,_,c,_,I("Mockito"),_,ex,_,T(12),_,B(nl,nl,w(4),F(pi,_,s,_,f,_,T(1),_,I("REPORTER")," = ",n,_,N(0),P(),";"),nl,w(4),F(s,_,f,_,T(4),_,I("MOCKING_PROGRESS")," = ",n,_,N(1),P(),";"),nl,nl,w(4),O("/**",nl,w(5),"* Creates mock object of given class or interface.",nl,w(5),"* &lt;p>",nl,w(5),"* ",nl,w(5),"* See examples in javadoc for {@link Mockito} class",nl,w(5),"* ",nl,w(5),"* @param classToMock class or interface to mock",nl,w(5),"* @return mock object",nl,w(5),"*/"),nl,w(4),M(2,[],[],$(pu,_,s," &lt;T> T ",I("mock"),P(V(0,$(T(13),"&lt;T> ",I("classToMock")))),_,B(nl,w(8),r,_,T(10),".",N(3),P(W(0),", ",L("null"),", ",G(11,"st fi","MOCKING_PROGRESS")),";",nl,w(4)))),nl,w(4),nl,w(4),M(4,[],[],$(s," &lt;T> T ",I("mock"),P(V(1,$(T(13),"&lt;T> ",I("classToMock"))),", ",V(2,$(T(14),_,I("name")))),_,B(nl,w(8),r,_,T(10),".",N(3),P(W(1),", ",W(2),", ",G(11,"st fi","MOCKING_PROGRESS")),";",nl,w(4)))),nl,nl,w(4),O("/**",nl,w(5),"* Stubs with return value or exception. E.g:",nl,w(5),"* &lt;pre>",nl,w(5),"*   stub(mock.someMethod()).toReturn(10);",nl,w(5),"*   ",nl,w(5),"*   //you can use flexible argument matchers, e.g:",nl,w(5),"*   stub(mock.someMethod(&lt;b>anyString()&lt;/b>)).toReturn(10);",nl,w(5),"*   ",nl,w(5),"*   //setting exception to be thrown:",nl,w(5),"*   stub(mock.someMethod(\"some arg\")).toThrow(new RuntimeException());",nl,w(5),"* &lt;/pre>",nl,w(5),"*",nl,w(5),"* For stubbing void methods with throwables see: {@link Mockito#stubVoid}",nl,w(5),"* &lt;p>",nl,w(5),"* Stubbing can be overridden: for example common stubbing can go to fixture setup",nl,w(5),"* but test methods can override it.",nl,w(5),"* &lt;p>",nl,w(5),"* Once stubbed, mocked method will always return stubbed value regardless of how many times it is called.",nl,w(5),"* &lt;p>",nl,w(5),"* Last stubbing is more important - when you stubbed the same method with the same arguments many times.",nl,w(5),"* &lt;p>",nl,w(5),"* Although it's possible to verify stubbed methods it's a good pattern to focus on testing that stubbed value is used correctly.",nl,w(5),"* &lt;p>",nl,w(5),"* See examples in javadoc for {@link Mockito} class",nl,w(5),"* ",nl,w(5),"* @param methodCall method call",nl,w(5),"* @return OngoingStubbing object to set stubbed value/exception",nl,w(5),"*/"),nl,w(4),M(5,[],[],$("@",T(16),P(L("\"unchecked\"")),nl,w(4),pu,_,s," &lt;T> ",T(5),"&lt;T> ",I("stub"),P(V(3,$("T ",I("methodCall")))),_,B(nl,w(8),G(11,"st fi","MOCKING_PROGRESS"),".",N(6),P(),";",nl,nl,w(8),V(4,$(T(5),_,I("stubbable")," = ",G(11,"st fi","MOCKING_PROGRESS"),".",N(7),P(),";")),nl,w(8),i,_,P(W(4)," == ",L("null")),_,B(nl,w(12),G(11,"st fi","REPORTER"),".",N(8),P(),";",nl,w(8)),nl,w(8),r,_,W(4),";",nl,w(4)))),nl,nl,w(4),O("/**",nl,w(5),"* Verifies certain behavior &lt;b>happened once&lt;/b> ",nl,w(5),"* &lt;p>",nl,w(5),"* Alias to &lt;code>verify(mock, times(1))&lt;/code> E.g:",nl,w(5),"* &lt;pre>",nl,w(5),"*   verify(mock).someMethod(\"some arg\");",nl,w(5),"* &lt;/pre>",nl,w(5),"* Above is equivalent to:",nl,w(5),"* &lt;pre>",nl,w(5),"*   verify(mock, times(1)).someMethod(\"some arg\");",nl,w(5),"* &lt;/pre>",nl,w(5),"*  ",nl,w(5),"* See examples in javadoc for {@link Mockito} class",nl,w(5),"* ",nl,w(5),"* @param mock to be verified",nl,w(5),"* @return mock object itself",nl,w(5),"*/"),nl,w(4),M(9,[],[],$(pu,_,s," &lt;T> T ",I("verify"),P(V(5,$("T ",I("mock")))),_,B(nl,w(8),r,_,N(10),P(W(5),", ",N(11),P(L("1"))),";",nl,w(4)))),nl,nl,w(4),O("/**",nl,w(5),"* Verifies certain behavior happened at least once / exact number of times / never. E.g:",nl,w(5),"* &lt;pre>",nl,w(5),"*   verify(mock, times(5)).someMethod(\"was called five times\");",nl,w(5),"*   ",nl,w(5),"*   verify(mock, atLeastOnce()).someMethod(\"was called at least once\");",nl,w(5),"*   ",nl,w(5),"*   //you can use flexible argument matchers, e.g:",nl,w(5),"*   verify(mock, atLeastOnce()).someMethod(&lt;b>anyString()&lt;/b>);",nl,w(5),"* &lt;/pre>",nl,w(5),"* ",nl,w(5),"* &lt;b>times(1) is the default&lt;/b> and can be omitted",nl,w(5),"* &lt;p>",nl,w(5),"* See examples in javadoc for {@link Mockito} class",nl,w(5),"* ",nl,w(5),"* @param mock to be verified",nl,w(5),"* @param mode times(x), atLeastOnce() or never()",nl,w(5),"* ",nl,w(5),"* @return mock object itself",nl,w(5),"*/"),nl,w(4),M(10,[],[],$(pu,_,s," &lt;T> T ",I("verify"),P(V(6,$("T ",I("mock"))),", ",V(7,$(T(7),_,I("mode")))),_,B(nl,w(8),i,_,P("!",T(10),".",N(12),P(W(6))),_,B(nl,w(12),G(11,"st fi","REPORTER"),".",N(13),P(),";",nl,w(8)),nl,w(8),G(11,"st fi","MOCKING_PROGRESS"),".",N(14),P(W(7)),";",nl,w(8),r,_,W(6),";",nl,w(4)))),nl,nl,w(4),O("/**",nl,w(5),"* Throws an AssertionError if any of given mocks has any unverified",nl,w(5),"* interaction.",nl,w(5),"* &lt;p>",nl,w(5),"* You can use this method after you verified your mocks - to make sure that nothing",nl,w(5),"* else was invoked on your mocks.",nl,w(5),"* &lt;p>",nl,w(5),"* Usually it's not necessary to call verifyNoMoreInteractions() all the time.",nl,w(5),"* See also {@link Mockito#never()} - it is more explicit and communicates an intent well.",nl,w(5),"* &lt;p>",nl,w(5),"* Stubbed invocations (if called) are also treated as interactions.",nl,w(5),"* &lt;p>",nl,w(5),"* Example:",nl,w(5),"* ",nl,w(5),"* &lt;pre>",nl,w(5),"* //interactions",nl,w(5),"* mock.doSomething();",nl,w(5),"* mock.doSomethingUnexpected();",nl,w(5),"* ",nl,w(5),"* //verification",nl,w(5),"* verify(mock).doSomething();",nl,w(5),"* ",nl,w(5),"* //following will fail because 'doSomethingUnexpected()' is unexpected",nl,w(5),"* verifyNoMoreInteractions(mock);",nl,w(5),"* ",nl,w(5),"* &lt;/pre>",nl,w(5),"* ",nl,w(5),"* See examples in javadoc for {@link Mockito} class",nl,w(5),"* ",nl,w(5),"* @param mocks to be verified",nl,w(5),"*/"),nl,w(4),M(15,[],[],$(pu,_,s,_,v,_,I("verifyNoMoreInteractions"),P(V(8,$(T(15),"... ",I("mocks")))),_,B(nl,w(8),N(16),P(W(8)),";",nl,w(8),G(11,"st fi","MOCKING_PROGRESS"),".",N(17),P(),";",nl,w(8),fo,_,P(V(9,$(T(15),_,I("mock")))," : ",W(8)),_,B(nl,w(12),tr,_,B(nl,w(16),T(10),".",N(18),P(W(9)),".",N(19),P(),";",nl,w(12)),_,ct,_,P(V(10,$(T(2),_,I("e")))),_,B(nl,w(16),G(11,"st fi","REPORTER"),".",N(20),P(),";",nl,w(12)),nl,w(8)),nl,w(4)))),nl,nl,w(4),O("/**",nl,w(5),"* Verifies that no interactions happened on given mocks.",nl,w(5),"* &lt;pre>",nl,w(5),"*   verifyZeroInteractions(mockOne, mockTwo);",nl,w(5),"* &lt;/pre>",nl,w(5),"* ",nl,w(5),"* Instead of verifyZeroInteractions() you can call verifyNoMoreInteractions() but ",nl,w(5),"* the first one is more explicit and can read better.",nl,w(5),"* &lt;p>",nl,w(5),"* See examples in javadoc for {@link Mockito} class",nl,w(5),"* ",nl,w(5),"* @param mocks to be verified",nl,w(5),"*/"),nl,w(4),M(21,[],[],$(pu,_,s,_,v,_,I("verifyZeroInteractions"),P(V(11,$(T(15),"... ",I("mocks")))),_,B(nl,w(8),N(15),P(W(11)),";",nl,w(4)))),nl,nl,w(4),M(16,[],[],$(pi,_,s,_,v,_,I("assertMocksNotEmpty"),P(V(12,$(T(15),"[] ",I("mocks")))),_,B(nl,w(8),i,_,P(W(12)," == ",L("null")," || ",W(12),".length == ",L("0")),_,B(nl,w(12),G(11,"st fi","REPORTER"),".",N(22),P(),";",nl,w(8)),nl,w(4)))),nl,nl,w(4),O("/**",nl,w(5),"* Stubs void method with an exception. E.g:",nl,w(5),"* &lt;pre>",nl,w(5),"*   stubVoid(mock).toThrow(new RuntimeException()).on().someMethod(\"some arg\");",nl,w(5),"* &lt;/pre>",nl,w(5),"* ",nl,w(5),"* See examples in javadoc for {@link Mockito} class",nl,w(5),"* ",nl,w(5),"* @param mock to stub",nl,w(5),"* @return stubbable object that allows stubbing with throwable",nl,w(5),"*/"),nl,w(4),M(23,[],[],$(pu,_,s," &lt;T> ",T(9),"&lt;T> ",I("stubVoid"),P(V(13,$("T ",I("mock")))),_,B(nl,w(8),V(14,$(T(3),"&lt;T> ",I("handler")," = ",T(10),".",N(18),P(W(13)),";")),nl,w(8),G(11,"st fi","MOCKING_PROGRESS"),".",N(6),P(),";",nl,w(8),r,_,W(14),".",N(24),P(),";",nl,w(4)))),nl,nl,w(4),O("/**",nl,w(5),"* Creates InOrder object that allows verifying mocks in order.",nl,w(5),"* ",nl,w(5),"* &lt;pre>",nl,w(5),"*   InOrder inOrder = inOrder(firstMock, secondMock);",nl,w(5),"*   ",nl,w(5),"*   inOrder.verify(firstMock).add(\"was called first\");",nl,w(5),"*   inOrder.verify(secondMock).add(\"was called second\");",nl,w(5),"* &lt;/pre>",nl,w(5),"* ",nl,w(5),"* Verification in order is flexible - &lt;b>you don't have to verify all interactions&lt;/b> one-by-one",nl,w(5),"* but only those that you are interested in testing in order.",nl,w(5),"* &lt;p>",nl,w(5),"* Also, you can create InOrder object passing only mocks that relevant for in-order verification.  ",nl,w(5),"*",nl,w(5),"* See examples in javadoc for {@link Mockito} class",nl,w(5),"* ",nl,w(5),"* @param mocks to be verified in order",nl,w(5),"* ",nl,w(5),"* @return InOrder object to be used to verify in order",nl,w(5),"*/"),nl,w(4),M(25,[],[],$(pu,_,s,_,T(17),_,I("inOrder"),P(V(15,$(T(15),"... ",I("mocks")))),_,B(nl,w(8),i,_,P(W(15)," == ",L("null")," || ",W(15),".length == ",L("0")),_,B(nl,w(12),G(11,"st fi","REPORTER"),".",N(26),P(),";",nl,w(8)),nl,w(8),fo,_,P(V(16,$(T(15),_,I("mock")))," : ",W(15)),_,B(nl,w(12),i,_,P("!",T(10),".",N(12),P(W(16))),_,B(nl,w(16),G(11,"st fi","REPORTER"),".",N(27),P(),";",nl,w(12)),nl,w(8)),nl,w(8),V(17,$(T(17),_,I("inOrderVerifier")," = ",n,_,N(28),P(T(0),".",N(29),P(W(15))),";")),nl,w(8),r,_,W(17),";",nl,w(4)))),nl,nl,w(4),O("/**",nl,w(5),"* Allows at-least-once verification. E.g:",nl,w(5),"* &lt;pre>",nl,w(5),"*   verify(mock, atLeastOnce()).someMethod(\"some arg\");",nl,w(5),"* &lt;/pre>",nl,w(5),"* ",nl,w(5),"* See examples in javadoc for {@link Mockito} class",nl,w(5),"* ",nl,w(5),"* @return verification mode",nl,w(5),"*/"),nl,w(4),M(30,[],[],$(pu,_,s,_,T(7),_,I("atLeastOnce"),P(),_,B(nl,w(8),r,_,T(8),".",N(31),P(),";",nl,w(4)))),nl,nl,w(4),O("/**",nl,w(5),"* Allows verifying exact number of invocations. E.g:",nl,w(5),"* &lt;pre>",nl,w(5),"*   verify(mock, times(2)).someMethod(\"some arg\");",nl,w(5),"* &lt;/pre>",nl,w(5),"* ",nl,w(5),"* See examples in javadoc for {@link Mockito} class",nl,w(5),"* ",nl,w(5),"* @param wantedNumberOfInvocations wanted number of invocations ",nl,w(5),"* ",nl,w(5),"* @return verification mode",nl,w(5),"*/"),nl,w(4),M(11,[],[],$(pu,_,s,_,T(7),_,I("times"),P(j," wantedNumberOfInvocations"),_,B(nl,w(8),r,_,T(8),".",N(32),P("wantedNumberOfInvocations"),";",nl,w(4)))),nl,w(4),nl,w(4),O("/**",nl,w(5),"* Alias to times(0), see {@link Mockito#times(int)}",nl,w(5),"* &lt;p>",nl,w(5),"* Verifies that interaction did not happen",nl,w(5),"* &lt;pre>",nl,w(5),"*   verify(mock, never()).someMethod();",nl,w(5),"* &lt;/pre>",nl,w(5),"* ",nl,w(5),"* &lt;p>",nl,w(5),"* See examples in javadoc for {@link Mockito} class",nl,w(5),"* ",nl,w(5),"* @return verification mode",nl,w(5),"*/"),nl,w(4),M(33,[],[],$(pu,_,s,_,T(7),_,I("never"),P(),_,B(nl,w(8),r,_,N(11),P(L("0")),";",nl,w(4)))),nl))));}});
defineStructure(
"ArgumentMatcher",function(factory){with(factory) { typeTable(["org.hamcrest.BaseMatcher","cl"],["org.hamcrest.Description","it"],["org.hamcrest.Matcher","it"],["org.mockito.internal.util.Decamelizer","cl"],["org.mockito.ArgumentMatcher","cl"],["org.mockito.internal.matchers.And","cl"],["org.mockito.internal.matchers.Any","cl"],["org.mockito.internal.matchers.Equals","cl"],["org.mockito.internal.matchers.Compare","cl"],["org.mockito.internal.matchers.CompareTo","cl"],["org.mockito.internal.matchers.Contains","cl"],["org.mockito.internal.matchers.EndsWith","cl"],["org.mockito.internal.matchers.EqualsWithDelta","cl"],["org.mockito.internal.matchers.Find","cl"],["org.mockito.internal.matchers.InstanceOf","cl"],["org.mockito.internal.matchers.Matches","cl"],["org.mockito.internal.matchers.Not","cl"],["org.mockito.internal.matchers.NotNull","cl"],["org.mockito.internal.matchers.Null","cl"],["org.mockito.internal.matchers.Or","cl"],["org.mockito.internal.matchers.Same","cl"],["org.mockito.internal.matchers.StartsWith","cl"],["org.mockito.internal.matchers.apachecommons.ReflectionEquals","cl"],["org.mockitousage.matchers.AssertingMatchersTest$0$0","cl"],["org.mockitousage.matchers.CustomMatchersTest$ContainsFoo","cl"],["org.mockitousage.matchers.CustomMatchersTest$IsAnyBoolean","cl"],["org.mockitousage.matchers.CustomMatchersTest$IsSorZ","cl"],["org.mockitousage.matchers.CustomMatchersTest$IsZeroOrOne","cl"],["org.mockitousage.matchers.CustomMatchersTest$StringThatContainsXxx","cl"],["org.mockitousage.matchers.CustomMatchersTest$0$0","cl"],["java.lang.Object","cl"],["org.hamcrest.SelfDescribing","it"],["java.lang.String","cl"],["java.lang.Class","cl"]),methodTable([4,"matches",[30],"me"],[2,"matches",[30],"me"],[19,"matches",[30],"me"],[23,"matches",[30],"me"],[14,"matches",[30],"me"],[13,"matches",[30],"me"],[25,"matches",[30],"me"],[11,"matches",[30],"me"],[26,"matches",[30],"me"],[7,"matches",[30],"me"],[21,"matches",[30],"me"],[9,"matches",[30],"me"],[24,"matches",[30],"me"],[22,"matches",[30],"me"],[16,"matches",[30],"me"],[6,"matches",[30],"me"],[27,"matches",[30],"me"],[5,"matches",[30],"me"],[20,"matches",[30],"me"],[17,"matches",[30],"me"],[18,"matches",[30],"me"],[15,"matches",[30],"me"],[12,"matches",[30],"me"],[10,"matches",[30],"me"],[28,"matches",[30],"me"],[8,"matches",[30],"me"],[29,"matches",[30],"me"],[4,"describeTo",[1],"me"],[31,"describeTo",[1],"me"],[13,"describeTo",[1],"me"],[18,"describeTo",[1],"me"],[10,"describeTo",[1],"me"],[22,"describeTo",[1],"me"],[8,"describeTo",[1],"me"],[20,"describeTo",[1],"me"],[15,"describeTo",[1],"me"],[19,"describeTo",[1],"me"],[5,"describeTo",[1],"me"],[16,"describeTo",[1],"me"],[9,"describeTo",[1],"me"],[17,"describeTo",[1],"me"],[21,"describeTo",[1],"me"],[11,"describeTo",[1],"me"],[14,"describeTo",[1],"me"],[12,"describeTo",[1],"me"],[6,"describeTo",[1],"me"],[7,"describeTo",[1],"me"],[30,"getClass",[],"me"],[33,"getSimpleName",[],"me"],[1,"appendText",[32],"me"],[3,"decamelizeMatcher",[32],"st me"]),localVariableTable(["argument","matches(java.lang.Object)-argument"],["description","describeTo(org.hamcrest.Description)-description"],["className","describeTo(org.hamcrest.Description)-className"])
return classDef(O("/*",nl," * Copyright (c) 2007 Mockito contributors",nl," * This program is made available under the terms of the MIT License.",nl," */"),nl,pa," org.mockito;",nl,nl,ip," org.hamcrest.",T(0),";",nl,ip," org.hamcrest.",T(1),";",nl,ip," org.hamcrest.",T(2),";",nl,ip," org.mockito.internal.util.",T(3),";",nl,nl,O("/**",nl," * Allows creating customized argument matchers. ",nl," * &lt;p>",nl," * ArgumentMatcher is an hamcrest {@link Matcher} with predefined describeTo() method.",nl," * In case of failure, ArgumentMatcher generates description based on &lt;b>decamelized class name&lt;/b> - to promote meaningful class names. ",nl," * For example &lt;b>StringWithStrongLanguage&lt;/b> matcher will generate 'String with strong language' description.",nl," * You can always override describeTo() method and provide detailed description.",nl," * &lt;p>",nl," * Use {@link Matchers#argThat} method and pass an instance of hamcrest {@link Matcher}, e.g:",nl," * ",nl," * &lt;pre>",nl," * class IsListOfTwoElements extends ArgumentMatcher&amp;lt;List&amp;gt; {",nl," *",w(5),"public boolean matches(Object list) {",nl," *",w(9),"return ((List) list).size() == 2;",nl," *",w(5),"}",nl," * }",nl," * ",nl," * List mock = mock(List.class);",nl," * ",nl," * stub(mock.addAll(argThat(new IsListOfTwoElements()))).toReturn(true);",nl," * ",nl," * mock.addAll(Arrays.asList(&amp;quot;one&amp;quot;, &amp;quot;two&amp;quot;));",nl," * ",nl," * verify(mock).addAll(argThat(new IsListOfTwoElements()));",nl," * &lt;/pre>",nl," * ",nl," * To keep it readable you may want to extract method, e.g:",nl," * ",nl," * &lt;pre>",nl," *   verify(mock).addAll(&lt;b>argThat(new IsListOfTwoElements())&lt;/b>);",nl," *   //becomes",nl," *   verify(mock).addAll(&lt;b>listOfTwoElements()&lt;/b>);",nl," * &lt;/pre>",nl," *",nl," * Custom argument matchers can make the test less readable. ",nl," * Sometimes it's better to implement equals() for arguments that are passed to mocks ",nl," * (Mockito naturally uses equals() for argument matching). ",nl," * This can make the test cleaner.",nl," * &lt;p>",nl," * Read more about {@link Matchers}",nl," * ",nl," * @param &lt;T> type of argument",nl," */"),nl,C(4,[5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29],$(pu,_,a,_,c,_,I("ArgumentMatcher"),"&lt;T> ",ex,_,T(0),"&lt;T> ",B(nl,nl,w(4),O("/**",nl,w(5),"* Returns whether this matcher accepts the given argument.",nl,w(5),"* &lt;p>",nl,w(5),"* The method should &lt;b>never&lt;/b> assert if the argument doesn't match. It",nl,w(5),"* should only return false.",nl,w(5),"* ",nl,w(5),"* @param argument",nl,w(5),"*",w(12),"the argument",nl,w(5),"* @return whether this matcher accepts the given argument.",nl,w(5),"*/"),nl,w(4),M(0,[1],[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26],$(pu,_,a,_,b,_,I("matches"),P(V(0,$(T(30),_,I("argument")))),";")),nl,nl,w(4),O("/* ",nl,w(5),"* By default this method decamlizes matchers name to promote meaningful names for matchers.",nl,w(5),"* &lt;p>",nl,w(5),"* For example &lt;b>StringWithStrongLanguage&lt;/b> matcher will generate 'String with strong language' description in case of failure.",nl,w(5),"* &lt;p>",nl,w(5),"* You might want to override this method to",nl,w(5),"* provide more specific description of the matcher (useful when",nl,w(5),"* verification failures are reported).",nl,w(5),"* ",nl,w(5),"* @param description the description to which the matcher description is",nl,w(5),"* appended.",nl,w(5),"*/"),nl,w(4),M(27,[28],[29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46],$(pu,_,v,_,I("describeTo"),P(V(1,$(T(1),_,I("description")))),_,B(nl,w(8),V(2,$(T(32),_,I("className")," = ",N(47),P(),".",N(48),P(),";")),nl,w(8),W(1),".",N(49),P(T(3),".",N(50),P(W(2))),";",nl,w(4)))),nl))));}});
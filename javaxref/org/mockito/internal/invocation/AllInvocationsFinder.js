defineStructure(
"AllInvocationsFinder",function(factory){with(factory) { typeTable(["java.util.Comparator","it"],["java.util.LinkedList","cl"],["java.util.List","it"],["java.util.Set","it"],["java.util.TreeSet","cl"],["org.mockito.internal.util.MockUtil","cl"],["org.mockito.internal.invocation.AllInvocationsFinder","cl"],["org.mockito.internal.verification.VerifyingRecorderTest$0$0","cl"],["org.mockito.internal.invocation.Invocation","cl"],["java.lang.Object","cl"],["org.mockito.internal.invocation.AllInvocationsFinder$SequenceNumberComparator","cl"],["org.mockito.internal.MockHandler","cl"],["java.util.Collection","it"],["java.lang.Integer","cl"]),methodTable([6,"getAllInvocations",[2],"me"],[7,"getAllInvocations",[2],"me"],[4,"TreeSet",[0],"co"],[10,"SequenceNumberComparator",[],"co"],[5,"getMockHandler",[9],"st me"],[11,"getRegisteredInvocations",[],"me"],[3,"addAll",[12],"me"],[1,"LinkedList",[12],"co"],[10,"compare",[8,8],"me"],[8,"getSequenceNumber",[],"me"],[13,"compareTo",[13],"me"]),localVariableTable(["mocks","getAllInvocations(java.util.List)-mocks"],["invocationsInOrder","getAllInvocations(java.util.List)-invocationsInOrder"],["mock","getAllInvocations(java.util.List)-mock"],["fromSingleMock","getAllInvocations(java.util.List)-fromSingleMock"],["o1","~SequenceNumberComparator-compare(org.mockito.internal.invocation.Invocation,org.mockito.internal.invocation.Invocation)-o1"],["o2","~SequenceNumberComparator-compare(org.mockito.internal.invocation.Invocation,org.mockito.internal.invocation.Invocation)-o2"])
return classDef(O("/*",nl," * Copyright (c) 2007 Mockito contributors",nl," * This program is made available under the terms of the MIT License.",nl," */"),nl,pa," org.mockito.internal.invocation;",nl,nl,ip," java.util.",T(0),";",nl,ip," java.util.",T(1),";",nl,ip," java.util.",T(2),";",nl,ip," java.util.",T(3),";",nl,ip," java.util.",T(4),";",nl,nl,ip," org.mockito.internal.util.",T(5),";",nl,nl,C(6,[7],$(pu,_,c,_,I("AllInvocationsFinder"),_,B(nl,w(4),nl,w(4),O("/**",nl,w(5),"* gets all invocations from mocks. Invocations are ordered earlier first. ",nl,w(5),"* ",nl,w(5),"* @param mocks",nl,w(5),"* @return invocations",nl,w(5),"*/"),nl,w(4),M(0,[],[1],$(pu,_,T(2),"&lt;",T(8),"> ",I("getAllInvocations"),P(V(0,$(T(2),"&lt;? ",ex,_,T(9),"> ",I("mocks")))),_,B(nl,w(8),V(1,$(T(3),"&lt;",T(8),"> ",I("invocationsInOrder")," = ",n,_,N(2),P(n,_,N(3),P()),";")),nl,w(8),fo,_,P(V(2,$(T(9),_,I("mock")))," : ",W(0)),_,B(nl,w(12),V(3,$(T(2),"&lt;",T(8),"> ",I("fromSingleMock")," = ",T(5),".",N(4),P(W(2)),".",N(5),P(),";")),nl,w(12),W(1),".",N(6),P(W(3)),";",nl,w(8)),nl,w(8),nl,w(8),r,_,n,_,N(7),P(W(1)),";",nl,w(4)))),nl,nl,w(4),C(10,[],$(pi,_,f,_,c,_,I("SequenceNumberComparator"),_,im,_,T(0),"&lt;",T(8),"> ",B(nl,w(8),M(8,[],[],$(pu,_,j,_,I("compare"),P(V(4,$(T(8),_,I("o1"))),", ",V(5,$(T(8),_,I("o2")))),_,B(nl,w(12),j," comparison = ",W(4),".",N(9),P(),".",N(10),P(W(5),".",N(9),P()),";",nl,w(12),as," comparison != ",L("0")," : ",L("\"sequence number has to be globally unique\""),";",nl,w(12),r," comparison;",nl,w(8)))),nl,w(4)))),nl))));}});
defineStructure(
"Find",function(factory){with(factory) { typeTable(["java.util.regex.Pattern","cl"],["org.hamcrest.Description","it"],["org.mockito.ArgumentMatcher","cl"],["org.mockito.internal.matchers.Find","cl"],["java.lang.String","cl"],["java.lang.Object","cl"],["java.lang.CharSequence","it"],["java.util.regex.Matcher","cl"]),methodTable([3,"Find",[4],"co"],[3,"matches",[5],"me"],[2,"matches",[5],"me"],[0,"compile",[4],"st me"],[0,"matcher",[6],"me"],[7,"find",[],"me"],[3,"describeTo",[1],"me"],[2,"describeTo",[1],"me"],[1,"appendText",[4],"me"],[4,"replaceAll",[4,4],"me"]),localVariableTable(["regex","<init>(java.lang.String)-regex"],["actual","matches(java.lang.Object)-actual"],["description","describeTo(org.hamcrest.Description)-description"])
return classDef(O("/*",nl," * Copyright (c) 2007 Mockito contributors",nl," * This program is made available under the terms of the MIT License.",nl," */"),nl,pa," org.mockito.internal.matchers;",nl,nl,ip," java.util.regex.",T(0),";",nl,nl,ip," org.hamcrest.",T(1),";",nl,ip," org.mockito.",T(2),";",nl,nl,C(3,[],$(pu,_,c,_,I("Find"),_,ex,_,T(2),"&lt;",T(4),"> ",B(nl,nl,w(4),F(pi,_,f,_,T(4),_,I("regex"),";"),nl,nl,w(4),M(0,[],[],$(pu," Find",P(V(0,$(T(4),_,I("regex")))),_,B(nl,w(8),t,".",G(3,"fi","regex")," = ",W(0),";",nl,w(4)))),nl,nl,w(4),M(1,[2],[],$(pu,_,b,_,I("matches"),P(V(1,$(T(5),_,I("actual")))),_,B(nl,w(8),r,_,W(1)," != ",L("null")," &amp;&amp; ",T(0),".",N(3),P(G(3,"fi","regex")),".",N(4),P(P(T(4)),_,W(1)),".",N(5),P(),";",nl,w(4)))),nl,nl,w(4),M(6,[7],[],$(pu,_,v,_,I("describeTo"),P(V(2,$(T(1),_,I("description")))),_,B(nl,w(8),W(2),".",N(8),P(L("\"find(\\\"\"")," + ",G(3,"fi","regex"),".",N(9),P(L("\"\\\\\\\\\""),", ",L("\"\\\\\\\\\\\\\\\\\""))," + ",L("\"\\\")\"")),";",nl,w(4)))),nl))));}});
defineStructure(
"EqualsBuilder",function(factory){with(factory) { typeTable(["java.lang.reflect.AccessibleObject","cl"],["java.lang.reflect.Field","cl"],["java.lang.reflect.Modifier","cl"],["java.util.Arrays","cl"],["java.util.Collections","cl"],["java.util.List","it"],["org.mockito.internal.matchers.apachecommons.EqualsBuilder","cl"],["java.lang.SuppressWarnings","an"],["java.lang.Object","cl"],["java.lang.Class","cl"],["java.lang.String","cl"],["java.lang.IllegalArgumentException","cl"],["java.lang.IllegalAccessException","cl"],["java.lang.InternalError","cl"],["java.math.BigDecimal","cl"],["java.lang.Double","cl"],["java.lang.Float","cl"]),methodTable([6,"EqualsBuilder",[],"co"],[6,"reflectionEquals",[8,8],"st me"],[6,"reflectionEquals",[8,8,"boolean",9,"java.lang.String[]"],"st me"],[6,"reflectionEquals",[8,8,"java.lang.String[]"],"st me"],[6,"reflectionEquals",[8,8,"boolean"],"st me"],[6,"reflectionEquals",[8,8,"boolean",9],"st me"],[8,"getClass",[],"me"],[9,"isInstance",[8],"me"],[6,"reflectionAppend",[8,8,9,6,"boolean","java.lang.String[]"],"st me"],[9,"getSuperclass",[],"me"],[6,"isEquals",[],"me"],[9,"getDeclaredFields",[],"me"],[3,"asList",["java.lang.Object[]"],"st me"],[0,"setAccessible",["java.lang.reflect.AccessibleObject[]","boolean"],"st me"],[5,"contains",[8],"me"],[1,"getName",[],"me"],[10,"indexOf",["int"],"me"],[2,"isTransient",["int"],"st me"],[1,"getModifiers",[],"me"],[2,"isStatic",["int"],"st me"],[6,"append",[8,8],"me"],[1,"get",[8],"me"],[13,"InternalError",[10],"co"],[6,"appendSuper",["boolean"],"me"],[6,"setEquals",["boolean"],"me"],[9,"isArray",[],"me"],[14,"compareTo",[14],"me"],[8,"equals",[8],"me"],[6,"append",["long[]","long[]"],"me"],[6,"append",["int[]","int[]"],"me"],[6,"append",["short[]","short[]"],"me"],[6,"append",["char[]","char[]"],"me"],[6,"append",["byte[]","byte[]"],"me"],[6,"append",["double[]","double[]"],"me"],[6,"append",["float[]","float[]"],"me"],[6,"append",["boolean[]","boolean[]"],"me"],[6,"append",["java.lang.Object[]","java.lang.Object[]"],"me"],[6,"append",["long","long"],"me"],[6,"append",["int","int"],"me"],[6,"append",["short","short"],"me"],[6,"append",["char","char"],"me"],[6,"append",["byte","byte"],"me"],[6,"append",["double","double"],"me"],[15,"doubleToLongBits",["double"],"st me"],[6,"append",["float","float"],"me"],[16,"floatToIntBits",["float"],"st me"],[6,"append",["boolean","boolean"],"me"]),localVariableTable(["lhs","reflectionEquals(java.lang.Object,java.lang.Object)-lhs"],["rhs","reflectionEquals(java.lang.Object,java.lang.Object)-rhs"],["lhs","reflectionEquals(java.lang.Object,java.lang.Object,java.lang.String[])-lhs"],["rhs","reflectionEquals(java.lang.Object,java.lang.Object,java.lang.String[])-rhs"],["excludeFields","reflectionEquals(java.lang.Object,java.lang.Object,java.lang.String[])-excludeFields"],["lhs","reflectionEquals(java.lang.Object,java.lang.Object,boolean)-lhs"],["rhs","reflectionEquals(java.lang.Object,java.lang.Object,boolean)-rhs"],["lhs","reflectionEquals(java.lang.Object,java.lang.Object,boolean,java.lang.Class)-lhs"],["rhs","reflectionEquals(java.lang.Object,java.lang.Object,boolean,java.lang.Class)-rhs"],["reflectUpToClass","reflectionEquals(java.lang.Object,java.lang.Object,boolean,java.lang.Class)-reflectUpToClass"],["lhs","reflectionEquals(java.lang.Object,java.lang.Object,boolean,java.lang.Class,java.lang.String[])-lhs"],["rhs","reflectionEquals(java.lang.Object,java.lang.Object,boolean,java.lang.Class,java.lang.String[])-rhs"],["reflectUpToClass","reflectionEquals(java.lang.Object,java.lang.Object,boolean,java.lang.Class,java.lang.String[])-reflectUpToClass"],["excludeFields","reflectionEquals(java.lang.Object,java.lang.Object,boolean,java.lang.Class,java.lang.String[])-excludeFields"],["lhsClass","reflectionEquals(java.lang.Object,java.lang.Object,boolean,java.lang.Class,java.lang.String[])-lhsClass"],["rhsClass","reflectionEquals(java.lang.Object,java.lang.Object,boolean,java.lang.Class,java.lang.String[])-rhsClass"],["testClass","reflectionEquals(java.lang.Object,java.lang.Object,boolean,java.lang.Class,java.lang.String[])-testClass"],["equalsBuilder","reflectionEquals(java.lang.Object,java.lang.Object,boolean,java.lang.Class,java.lang.String[])-equalsBuilder"],["e","reflectionEquals(java.lang.Object,java.lang.Object,boolean,java.lang.Class,java.lang.String[])-e"],["lhs","reflectionAppend(java.lang.Object,java.lang.Object,java.lang.Class,org.mockito.internal.matchers.apachecommons.EqualsBuilder,boolean,java.lang.String[])-lhs"],["rhs","reflectionAppend(java.lang.Object,java.lang.Object,java.lang.Class,org.mockito.internal.matchers.apachecommons.EqualsBuilder,boolean,java.lang.String[])-rhs"],["clazz","reflectionAppend(java.lang.Object,java.lang.Object,java.lang.Class,org.mockito.internal.matchers.apachecommons.EqualsBuilder,boolean,java.lang.String[])-clazz"],["builder","reflectionAppend(java.lang.Object,java.lang.Object,java.lang.Class,org.mockito.internal.matchers.apachecommons.EqualsBuilder,boolean,java.lang.String[])-builder"],["excludeFields","reflectionAppend(java.lang.Object,java.lang.Object,java.lang.Class,org.mockito.internal.matchers.apachecommons.EqualsBuilder,boolean,java.lang.String[])-excludeFields"],["fields","reflectionAppend(java.lang.Object,java.lang.Object,java.lang.Class,org.mockito.internal.matchers.apachecommons.EqualsBuilder,boolean,java.lang.String[])-fields"],["excludedFieldList","reflectionAppend(java.lang.Object,java.lang.Object,java.lang.Class,org.mockito.internal.matchers.apachecommons.EqualsBuilder,boolean,java.lang.String[])-excludedFieldList"],["f","reflectionAppend(java.lang.Object,java.lang.Object,java.lang.Class,org.mockito.internal.matchers.apachecommons.EqualsBuilder,boolean,java.lang.String[])-f"],["e","reflectionAppend(java.lang.Object,java.lang.Object,java.lang.Class,org.mockito.internal.matchers.apachecommons.EqualsBuilder,boolean,java.lang.String[])-e"],["lhs","append(java.lang.Object,java.lang.Object)-lhs"],["rhs","append(java.lang.Object,java.lang.Object)-rhs"],["lhsClass","append(java.lang.Object,java.lang.Object)-lhsClass"],["lhs","append(java.lang.Object[],java.lang.Object[])-lhs"],["rhs","append(java.lang.Object[],java.lang.Object[])-rhs"],["lhs","append(long[],long[])-lhs"],["rhs","append(long[],long[])-rhs"],["lhs","append(int[],int[])-lhs"],["rhs","append(int[],int[])-rhs"],["lhs","append(short[],short[])-lhs"],["rhs","append(short[],short[])-rhs"],["lhs","append(char[],char[])-lhs"],["rhs","append(char[],char[])-rhs"],["lhs","append(byte[],byte[])-lhs"],["rhs","append(byte[],byte[])-rhs"],["lhs","append(double[],double[])-lhs"],["rhs","append(double[],double[])-rhs"],["lhs","append(float[],float[])-lhs"],["rhs","append(float[],float[])-rhs"],["lhs","append(boolean[],boolean[])-lhs"],["rhs","append(boolean[],boolean[])-rhs"])
return classDef(O("/*",nl," * Copyright (c) 2007 Mockito contributors",nl," * This program is made available under the terms of the MIT License.",nl," */"),nl,nl,O("//Class comes from Apache Commons Lang, added some tiny changes  "),nl,nl,O("/*",nl," * Licensed to the Apache Software Foundation (ASF) under one or more",nl," * contributor license agreements.  See the NOTICE file distributed with",nl," * this work for additional information regarding copyright ownership.",nl," * The ASF licenses this file to You under the Apache License, Version 2.0",nl," * (the \"License\"); you may not use this file except in compliance with",nl," * the License.  You may obtain a copy of the License at",nl," * ",nl," *",w(6),"http://www.apache.org/licenses/LICENSE-2.0",nl," * ",nl," * Unless required by applicable law or agreed to in writing, software",nl," * distributed under the License is distributed on an \"AS IS\" BASIS,",nl," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",nl," * See the License for the specific language governing permissions and",nl," * limitations under the License.",nl," */"),nl,pa," org.mockito.internal.matchers.apachecommons;",nl,nl,ip," java.lang.reflect.",T(0),";",nl,ip," java.lang.reflect.",T(1),";",nl,ip," java.lang.reflect.",T(2),";",nl,ip," java.util.",T(3),";",nl,ip," java.util.",T(4),";",nl,ip," java.util.",T(5),";",nl,nl,O("/**",nl," * &lt;p>Assists in implementing {@link Object#equals(Object)} methods.&lt;/p>",nl," *",nl," * &lt;p> This class provides methods to build a good equals method for any",nl," * class. It follows rules laid out in",nl," * &lt;a href=\"http://java.sun.com/docs/books/effective/index.html\">Effective Java&lt;/a>",nl," * , by Joshua Bloch. In particular the rule for comparing &lt;code>doubles&lt;/code>,",nl," * &lt;code>floats&lt;/code>, and arrays can be tricky. Also, making sure that",nl," * &lt;code>equals()&lt;/code> and &lt;code>hashCode()&lt;/code> are consistent can be",nl," * difficult.&lt;/p>",nl," *",nl," * &lt;p>Two Objects that compare as equals must generate the same hash code,",nl," * but two Objects with the same hash code do not have to be equal.&lt;/p>",nl," *",nl," * &lt;p>All relevant fields should be included in the calculation of equals.",nl," * Derived fields may be ignored. In particular, any field used in",nl," * generating a hash code must be used in the equals method, and vice",nl," * versa.&lt;/p>",nl," *",nl," * &lt;p>Typical use for the code is as follows:&lt;/p>",nl," * &lt;pre>",nl," * public boolean equals(Object obj) {",nl," *   if (obj == null) { return false; }",nl," *   if (obj == this) { return true; }",nl," *   if (obj.getClass() != getClass()) {",nl," *",w(5),"return false;",nl," *   }",nl," *   MyClass rhs = (MyClass) obj;",nl," *   return new EqualsBuilder()",nl," *",w(17),".appendSuper(super.equals(obj))",nl," *",w(17),".append(field1, rhs.field1)",nl," *",w(17),".append(field2, rhs.field2)",nl," *",w(17),".append(field3, rhs.field3)",nl," *",w(17),".isEquals();",nl," *  }",nl," * &lt;/pre>",nl," *",nl," * &lt;p> Alternatively, there is a method that uses reflection to determine",nl," * the fields to test. Because these fields are usually private, the method,",nl," * &lt;code>reflectionEquals&lt;/code>, uses &lt;code>AccessibleObject.setAccessible&lt;/code> to",nl," * change the visibility of the fields. This will fail under a security",nl," * manager, unless the appropriate permissions are set up correctly. It is",nl," * also slower than testing explicitly.&lt;/p>",nl," *",nl," * &lt;p> A typical invocation for this method would look like:&lt;/p>",nl," * &lt;pre>",nl," * public boolean equals(Object obj) {",nl," *   return EqualsBuilder.reflectionEquals(this, obj);",nl," * }",nl," * &lt;/pre>",nl," *",nl," * @author &lt;a href=\"mailto:steve.downey@netfolio.com\">Steve Downey&lt;/a>",nl," * @author Stephen Colebourne",nl," * @author Gary Gregory",nl," * @author Pete Gieser",nl," * @author Arun Mammen Thomas",nl," * @since 1.0",nl," * @version $Id: EqualsBuilder.java 611543 2008-01-13 07:00:22Z bayard $",nl," */"),nl,C(6,[],$("@",T(7),P(L("\"unchecked\"")),nl,c,_,I("EqualsBuilder"),_,B(nl,w(4),nl,w(4),O("/**",nl,w(5),"* If the fields tested are equals.",nl,w(5),"* The default value is &lt;code>true&lt;/code>.",nl,w(5),"*/"),nl,w(4),pi,_,b," isEquals = ",L("true"),";",nl,nl,w(4),O("/**",nl,w(5),"* &lt;p>Constructor for EqualsBuilder.&lt;/p>",nl,w(5),"*",nl,w(5),"* &lt;p>Starts off assuming that equals is &lt;code>true&lt;/code>.&lt;/p>",nl,w(5),"* @see Object#equals(Object)",nl,w(5),"*/"),nl,w(4),M(0,[],[],$(pu," EqualsBuilder",P(),_,B(nl,w(8),O("// do nothing for now."),nl,w(4)))),nl,nl,w(4),O("//-------------------------------------------------------------------------"),nl,nl,w(4),O("/**",nl,w(5),"* &lt;p>This method uses reflection to determine if the two &lt;code>Object&lt;/code>s",nl,w(5),"* are equal.&lt;/p>",nl,w(5),"*",nl,w(5),"* &lt;p>It uses &lt;code>AccessibleObject.setAccessible&lt;/code> to gain access to private",nl,w(5),"* fields. This means that it will throw a security exception if run under",nl,w(5),"* a security manager, if the permissions are not set up correctly. It is also",nl,w(5),"* not as efficient as testing explicitly.&lt;/p>",nl,w(5),"*",nl,w(5),"* &lt;p>Transient members will be not be tested, as they are likely derived",nl,w(5),"* fields, and not part of the value of the Object.&lt;/p>",nl,w(5),"*",nl,w(5),"* &lt;p>Static fields will not be tested. Superclass fields will be included.&lt;/p>",nl,w(5),"*",nl,w(5),"* @param lhs  &lt;code>this&lt;/code> object",nl,w(5),"* @param rhs  the other object",nl,w(5),"* @return &lt;code>true&lt;/code> if the two Objects have tested equals.",nl,w(5),"*/"),nl,w(4),M(1,[],[],$(pu,_,s,_,b,_,I("reflectionEquals"),P(V(0,$(T(8),_,I("lhs"))),", ",V(1,$(T(8),_,I("rhs")))),_,B(nl,w(8),r,_,N(2),P(W(0),", ",W(1),", ",L("false"),", ",L("null"),", ",L("null")),";",nl,w(4)))),nl,nl,w(4),O("/**",nl,w(5),"* &lt;p>This method uses reflection to determine if the two &lt;code>Object&lt;/code>s",nl,w(5),"* are equal.&lt;/p>",nl,w(5),"*",nl,w(5),"* &lt;p>It uses &lt;code>AccessibleObject.setAccessible&lt;/code> to gain access to private",nl,w(5),"* fields. This means that it will throw a security exception if run under",nl,w(5),"* a security manager, if the permissions are not set up correctly. It is also",nl,w(5),"* not as efficient as testing explicitly.&lt;/p>",nl,w(5),"*",nl,w(5),"* &lt;p>Transient members will be not be tested, as they are likely derived",nl,w(5),"* fields, and not part of the value of the Object.&lt;/p>",nl,w(5),"*",nl,w(5),"* &lt;p>Static fields will not be tested. Superclass fields will be included.&lt;/p>",nl,w(5),"*",nl,w(5),"* @param lhs  &lt;code>this&lt;/code> object",nl,w(5),"* @param rhs  the other object",nl,w(5),"* @param excludeFields  array of field names to exclude from testing",nl,w(5),"* @return &lt;code>true&lt;/code> if the two Objects have tested equals.",nl,w(5),"*/"),nl,w(4),M(3,[],[],$(pu,_,s,_,b,_,I("reflectionEquals"),P(V(2,$(T(8),_,I("lhs"))),", ",V(3,$(T(8),_,I("rhs"))),", ",V(4,$(T(10),"[] ",I("excludeFields")))),_,B(nl,w(8),r,_,N(2),P(W(2),", ",W(3),", ",L("false"),", ",L("null"),", ",W(4)),";",nl,w(4)))),nl,nl,w(4),O("/**",nl,w(5),"* &lt;p>This method uses reflection to determine if the two &lt;code>Object&lt;/code>s",nl,w(5),"* are equal.&lt;/p>",nl,w(5),"*",nl,w(5),"* &lt;p>It uses &lt;code>AccessibleObject.setAccessible&lt;/code> to gain access to private",nl,w(5),"* fields. This means that it will throw a security exception if run under",nl,w(5),"* a security manager, if the permissions are not set up correctly. It is also",nl,w(5),"* not as efficient as testing explicitly.&lt;/p>",nl,w(5),"*",nl,w(5),"* &lt;p>If the TestTransients parameter is set to &lt;code>true&lt;/code>, transient",nl,w(5),"* members will be tested, otherwise they are ignored, as they are likely",nl,w(5),"* derived fields, and not part of the value of the &lt;code>Object&lt;/code>.&lt;/p>",nl,w(5),"*",nl,w(5),"* &lt;p>Static fields will not be tested. Superclass fields will be included.&lt;/p>",nl,w(5),"*",nl,w(5),"* @param lhs  &lt;code>this&lt;/code> object",nl,w(5),"* @param rhs  the other object",nl,w(5),"* @param testTransients  whether to include transient fields",nl,w(5),"* @return &lt;code>true&lt;/code> if the two Objects have tested equals.",nl,w(5),"*/"),nl,w(4),M(4,[],[],$(pu,_,s,_,b,_,I("reflectionEquals"),P(V(5,$(T(8),_,I("lhs"))),", ",V(6,$(T(8),_,I("rhs"))),", ",b," testTransients"),_,B(nl,w(8),r,_,N(2),P(W(5),", ",W(6),", testTransients, ",L("null"),", ",L("null")),";",nl,w(4)))),nl,nl,w(4),O("/**",nl,w(5),"* &lt;p>This method uses reflection to determine if the two &lt;code>Object&lt;/code>s",nl,w(5),"* are equal.&lt;/p>",nl,w(5),"*",nl,w(5),"* &lt;p>It uses &lt;code>AccessibleObject.setAccessible&lt;/code> to gain access to private",nl,w(5),"* fields. This means that it will throw a security exception if run under",nl,w(5),"* a security manager, if the permissions are not set up correctly. It is also",nl,w(5),"* not as efficient as testing explicitly.&lt;/p>",nl,w(5),"*",nl,w(5),"* &lt;p>If the testTransients parameter is set to &lt;code>true&lt;/code>, transient",nl,w(5),"* members will be tested, otherwise they are ignored, as they are likely",nl,w(5),"* derived fields, and not part of the value of the &lt;code>Object&lt;/code>.&lt;/p>",nl,w(5),"*",nl,w(5),"* &lt;p>Static fields will not be included. Superclass fields will be appended",nl,w(5),"* up to and including the specified superclass. A null superclass is treated",nl,w(5),"* as java.lang.Object.&lt;/p>",nl,w(5),"*",nl,w(5),"* @param lhs  &lt;code>this&lt;/code> object",nl,w(5),"* @param rhs  the other object",nl,w(5),"* @param testTransients  whether to include transient fields",nl,w(5),"* @param reflectUpToClass  the superclass to reflect up to (inclusive),",nl,w(5),"*  may be &lt;code>null&lt;/code>",nl,w(5),"* @return &lt;code>true&lt;/code> if the two Objects have tested equals.",nl,w(5),"* @since 2.0",nl,w(5),"*/"),nl,w(4),M(5,[],[],$(pu,_,s,_,b,_,I("reflectionEquals"),P(V(7,$(T(8),_,I("lhs"))),", ",V(8,$(T(8),_,I("rhs"))),", ",b," testTransients, ",V(9,$(T(9),_,I("reflectUpToClass")))),_,B(nl,w(8),r,_,N(2),P(W(7),", ",W(8),", testTransients, ",W(9),", ",L("null")),";",nl,w(4)))),nl,nl,w(4),O("/**",nl,w(5),"* &lt;p>This method uses reflection to determine if the two &lt;code>Object&lt;/code>s",nl,w(5),"* are equal.&lt;/p>",nl,w(5),"*",nl,w(5),"* &lt;p>It uses &lt;code>AccessibleObject.setAccessible&lt;/code> to gain access to private",nl,w(5),"* fields. This means that it will throw a security exception if run under",nl,w(5),"* a security manager, if the permissions are not set up correctly. It is also",nl,w(5),"* not as efficient as testing explicitly.&lt;/p>",nl,w(5),"*",nl,w(5),"* &lt;p>If the testTransients parameter is set to &lt;code>true&lt;/code>, transient",nl,w(5),"* members will be tested, otherwise they are ignored, as they are likely",nl,w(5),"* derived fields, and not part of the value of the &lt;code>Object&lt;/code>.&lt;/p>",nl,w(5),"*",nl,w(5),"* &lt;p>Static fields will not be included. Superclass fields will be appended",nl,w(5),"* up to and including the specified superclass. A null superclass is treated",nl,w(5),"* as java.lang.Object.&lt;/p>",nl,w(5),"*",nl,w(5),"* @param lhs  &lt;code>this&lt;/code> object",nl,w(5),"* @param rhs  the other object",nl,w(5),"* @param testTransients  whether to include transient fields",nl,w(5),"* @param reflectUpToClass  the superclass to reflect up to (inclusive),",nl,w(5),"*  may be &lt;code>null&lt;/code>",nl,w(5),"* @param excludeFields  array of field names to exclude from testing",nl,w(5),"* @return &lt;code>true&lt;/code> if the two Objects have tested equals.",nl,w(5),"* @since 2.0",nl,w(5),"*/"),nl,w(4),M(2,[],[],$(pu,_,s,_,b,_,I("reflectionEquals"),P(V(10,$(T(8),_,I("lhs"))),", ",V(11,$(T(8),_,I("rhs"))),", ",b," testTransients, ",V(12,$(T(9),_,I("reflectUpToClass"))),",",nl,w(12),V(13,$(T(10),"[] ",I("excludeFields")))),_,B(nl,w(8),i,_,P(W(10)," == ",W(11)),_,B(nl,w(12),r,_,L("true"),";",nl,w(8)),nl,w(8),i,_,P(W(10)," == ",L("null")," || ",W(11)," == ",L("null")),_,B(nl,w(12),r,_,L("false"),";",nl,w(8)),nl,w(8),O("// Find the leaf class since there may be transients in the leaf "),nl,w(8),O("// class or in classes between the leaf and root."),nl,w(8),O("// If we are not testing transients or a subclass has no ivars, "),nl,w(8),O("// then a subclass can test equals to a superclass."),nl,w(8),V(14,$(T(9),_,I("lhsClass")," = ",W(10),".",N(6),P(),";")),nl,w(8),V(15,$(T(9),_,I("rhsClass")," = ",W(11),".",N(6),P(),";")),nl,w(8),V(16,$(T(9),_,I("testClass"),";")),nl,w(8),i,_,P(W(14),".",N(7),P(W(11))),_,B(nl,w(12),W(16)," = ",W(14),";",nl,w(12),i,_,P("!",W(15),".",N(7),P(W(10))),_,B(nl,w(16),O("// rhsClass is a subclass of lhsClass"),nl,w(16),W(16)," = ",W(15),";",nl,w(12)),nl,w(8)),_,e,_,i,_,P(W(15),".",N(7),P(W(10))),_,B(nl,w(12),W(16)," = ",W(15),";",nl,w(12),i,_,P("!",W(14),".",N(7),P(W(11))),_,B(nl,w(16),O("// lhsClass is a subclass of rhsClass"),nl,w(16),W(16)," = ",W(14),";",nl,w(12)),nl,w(8)),_,e,_,B(nl,w(12),O("// The two classes are not related."),nl,w(12),r,_,L("false"),";",nl,w(8)),nl,w(8),V(17,$(T(6),_,I("equalsBuilder")," = ",n,_,N(0),P(),";")),nl,w(8),tr,_,B(nl,w(12),N(8),P(W(10),", ",W(11),", ",W(16),", ",W(17),", testTransients, ",W(13)),";",nl,w(12),wh,_,P(W(16),".",N(9),P()," != ",L("null")," &amp;&amp; ",W(16)," != ",W(12)),_,B(nl,w(16),W(16)," = ",W(16),".",N(9),P(),";",nl,w(16),N(8),P(W(10),", ",W(11),", ",W(16),", ",W(17),", testTransients, ",W(13)),";",nl,w(12)),nl,w(8)),_,ct,_,P(V(18,$(T(11),_,I("e")))),_,B(nl,w(12),O("// In this case, we tried to test a subclass vs. a superclass and"),nl,w(12),O("// the subclass has ivars or the ivars are transient and "),nl,w(12),O("// we are testing transients."),nl,w(12),O("// If a subclass has ivars that we are trying to test them, we get an"),nl,w(12),O("// exception and we know that the objects are not equal."),nl,w(12),r,_,L("false"),";",nl,w(8)),nl,w(8),r,_,W(17),".",N(10),P(),";",nl,w(4)))),nl,nl,w(4),O("/**",nl,w(5),"* &lt;p>Appends the fields and values defined by the given object of the",nl,w(5),"* given Class.&lt;/p>",nl,w(5),"* ",nl,w(5),"* @param lhs  the left hand object",nl,w(5),"* @param rhs  the right hand object",nl,w(5),"* @param clazz  the class to append details of",nl,w(5),"* @param builder  the builder to append to",nl,w(5),"* @param useTransients  whether to test transient fields",nl,w(5),"* @param excludeFields  array of field names to exclude from testing",nl,w(5),"*/"),nl,w(4),M(8,[],[],$(pi,_,s,_,v,_,I("reflectionAppend"),P(nl,w(8),V(19,$(T(8),_,I("lhs"))),",",nl,w(8),V(20,$(T(8),_,I("rhs"))),",",nl,w(8),V(21,$(T(9),_,I("clazz"))),",",nl,w(8),V(22,$(T(6),_,I("builder"))),",",nl,w(8),b," useTransients,",nl,w(8),V(23,$(T(10),"[] ",I("excludeFields")))),_,B(nl,w(8),V(24,$(T(1),"[] ",I("fields")," = ",W(21),".",N(11),P(),";")),nl,w(8),V(25,$(T(5),_,I("excludedFieldList")," = ",W(23)," != ",L("null")," ? ",T(3),".",N(12),P(W(23))," : ",T(4),".",G(4,"st fi","EMPTY_LIST"),";")),nl,w(8),T(0),".",N(13),P(W(24),", ",L("true")),";",nl,w(8),fo,_,P(j," i = ",L("0"),"; i &lt; ",W(24),".length &amp;&amp; ",W(22),".isEquals; i++"),_,B(nl,w(12),V(26,$(T(1),_,I("f")," = ",W(24),"[i];")),nl,w(12),i,_,P("!",W(25),".",N(14),P(W(26),".",N(15),P()),nl,w(16),"&amp;&amp; ",P(W(26),".",N(15),P(),".",N(16),P(L("'$'"))," == -",L("1")),nl,w(16),"&amp;&amp; ",P("useTransients || !",T(2),".",N(17),P(W(26),".",N(18),P())),nl,w(16),"&amp;&amp; ",P("!",T(2),".",N(19),P(W(26),".",N(18),P()))),_,B(nl,w(16),tr,_,B(nl,w(20),W(22),".",N(20),P(W(26),".",N(21),P(W(19)),", ",W(26),".",N(21),P(W(20))),";",nl,w(16)),_,ct,_,P(V(27,$(T(12),_,I("e")))),_,B(nl,w(20),O("//this can't happen. Would get a Security exception instead"),nl,w(20),O("//throw a runtime exception in case the impossible happens."),nl,w(20),tw,_,n,_,N(22),P(L("\"Unexpected IllegalAccessException\"")),";",nl,w(16)),nl,w(12)),nl,w(8)),nl,w(4)))),nl,nl,w(4),O("//-------------------------------------------------------------------------"),nl,nl,w(4),O("/**",nl,w(5),"* &lt;p>Adds the result of &lt;code>super.equals()&lt;/code> to this builder.&lt;/p>",nl,w(5),"*",nl,w(5),"* @param superEquals  the result of calling &lt;code>super.equals()&lt;/code>",nl,w(5),"* @return EqualsBuilder - used to chain calls.",nl,w(5),"* @since 2.0",nl,w(5),"*/"),nl,w(4),M(23,[],[],$(pu,_,T(6),_,I("appendSuper"),P(b," superEquals"),_,B(nl,w(8),i,_,P("isEquals == ",L("false")),_,B(nl,w(12),r,_,t,";",nl,w(8)),nl,w(8),"isEquals = superEquals;",nl,w(8),r,_,t,";",nl,w(4)))),nl,nl,w(4),O("//-------------------------------------------------------------------------"),nl,nl,w(4),O("/**",nl,w(5),"* &lt;p>Test if two &lt;code>Object&lt;/code>s are equal using their",nl,w(5),"* &lt;code>equals&lt;/code> method.&lt;/p>",nl,w(5),"*",nl,w(5),"* @param lhs  the left hand object",nl,w(5),"* @param rhs  the right hand object",nl,w(5),"* @return EqualsBuilder - used to chain calls.",nl,w(5),"*/"),nl,w(4),M(20,[],[],$(pu,_,T(6),_,I("append"),P(V(28,$(T(8),_,I("lhs"))),", ",V(29,$(T(8),_,I("rhs")))),_,B(nl,w(8),i,_,P("isEquals == ",L("false")),_,B(nl,w(12),r,_,t,";",nl,w(8)),nl,w(8),i,_,P(W(28)," == ",W(29)),_,B(nl,w(12),r,_,t,";",nl,w(8)),nl,w(8),i,_,P(W(28)," == ",L("null")," || ",W(29)," == ",L("null")),_,B(nl,w(12),t,".",N(24),P(L("false")),";",nl,w(12),r,_,t,";",nl,w(8)),nl,w(8),V(30,$(T(9),_,I("lhsClass")," = ",W(28),".",N(6),P(),";")),nl,w(8),i,_,P("!",W(30),".",N(25),P()),_,B(nl,w(12),i,_,P(W(28),_,is," java.math.",T(14)," &amp;&amp; ",W(29),_,is," java.math.",T(14)),_,B(nl,w(16),"isEquals = ",P(P(P("java.math.",T(14)),_,W(28)),".",N(26),P(P("java.math.",T(14)),_,W(29))," == ",L("0")),";",nl,w(12)),_,e,_,B(nl,w(16),O("// The simple case, not an array, just test the element"),nl,w(16),"isEquals = ",W(28),".",N(27),P(W(29)),";",nl,w(12)),nl,w(8)),_,e,_,i,_,P(W(28),".",N(6),P()," != ",W(29),".",N(6),P()),_,B(nl,w(12),O("// Here when we compare different dimensions, for example: a boolean[][] to a boolean[] "),nl,w(12),t,".",N(24),P(L("false")),";",nl,w(8),nl,w(8),O("// 'Switch' on type of array, to dispatch to the correct handler"),nl,w(8),O("// This handles multi dimensional arrays of the same depth"),nl,w(8)),_,e,_,i,_,P(W(28),_,is,_,l,"[]"),_,B(nl,w(12),N(28),P(P(l,"[]"),_,W(28),", ",P(l,"[]"),_,W(29)),";",nl,w(8)),_,e,_,i,_,P(W(28),_,is,_,j,"[]"),_,B(nl,w(12),N(29),P(P(j,"[]"),_,W(28),", ",P(j,"[]"),_,W(29)),";",nl,w(8)),_,e,_,i,_,P(W(28),_,is,_,sh,"[]"),_,B(nl,w(12),N(30),P(P(sh,"[]"),_,W(28),", ",P(sh,"[]"),_,W(29)),";",nl,w(8)),_,e,_,i,_,P(W(28),_,is,_,ch,"[]"),_,B(nl,w(12),N(31),P(P(ch,"[]"),_,W(28),", ",P(ch,"[]"),_,W(29)),";",nl,w(8)),_,e,_,i,_,P(W(28),_,is,_,by,"[]"),_,B(nl,w(12),N(32),P(P(by,"[]"),_,W(28),", ",P(by,"[]"),_,W(29)),";",nl,w(8)),_,e,_,i,_,P(W(28),_,is,_,db,"[]"),_,B(nl,w(12),N(33),P(P(db,"[]"),_,W(28),", ",P(db,"[]"),_,W(29)),";",nl,w(8)),_,e,_,i,_,P(W(28),_,is,_,fl,"[]"),_,B(nl,w(12),N(34),P(P(fl,"[]"),_,W(28),", ",P(fl,"[]"),_,W(29)),";",nl,w(8)),_,e,_,i,_,P(W(28),_,is,_,b,"[]"),_,B(nl,w(12),N(35),P(P(b,"[]"),_,W(28),", ",P(b,"[]"),_,W(29)),";",nl,w(8)),_,e,_,B(nl,w(12),O("// Not an array of primitives"),nl,w(12),N(36),P(P(T(8),"[]"),_,W(28),", ",P(T(8),"[]"),_,W(29)),";",nl,w(8)),nl,w(8),r,_,t,";",nl,w(4)))),nl,nl,w(4),O("/**",nl,w(5),"* &lt;p>",nl,w(5),"* Test if two &lt;code>long&lt;/code> s are equal.",nl,w(5),"* &lt;/p>",nl,w(5),"* ",nl,w(5),"* @param lhs",nl,w(5),"*",w(18),"the left hand &lt;code>long&lt;/code>",nl,w(5),"* @param rhs",nl,w(5),"*",w(18),"the right hand &lt;code>long&lt;/code>",nl,w(5),"* @return EqualsBuilder - used to chain calls.",nl,w(5),"*/"),nl,w(4),M(37,[],[],$(pu,_,T(6),_,I("append"),P(l," lhs, ",l," rhs"),_,B(nl,w(8),i,_,P("isEquals == ",L("false")),_,B(nl,w(12),r,_,t,";",nl,w(8)),nl,w(8),"isEquals = ",P("lhs == rhs"),";",nl,w(8),r,_,t,";",nl,w(4)))),nl,nl,w(4),O("/**",nl,w(5),"* &lt;p>Test if two &lt;code>int&lt;/code>s are equal.&lt;/p>",nl,w(5),"*",nl,w(5),"* @param lhs  the left hand &lt;code>int&lt;/code>",nl,w(5),"* @param rhs  the right hand &lt;code>int&lt;/code>",nl,w(5),"* @return EqualsBuilder - used to chain calls.",nl,w(5),"*/"),nl,w(4),M(38,[],[],$(pu,_,T(6),_,I("append"),P(j," lhs, ",j," rhs"),_,B(nl,w(8),i,_,P("isEquals == ",L("false")),_,B(nl,w(12),r,_,t,";",nl,w(8)),nl,w(8),"isEquals = ",P("lhs == rhs"),";",nl,w(8),r,_,t,";",nl,w(4)))),nl,nl,w(4),O("/**",nl,w(5),"* &lt;p>Test if two &lt;code>short&lt;/code>s are equal.&lt;/p>",nl,w(5),"*",nl,w(5),"* @param lhs  the left hand &lt;code>short&lt;/code>",nl,w(5),"* @param rhs  the right hand &lt;code>short&lt;/code>",nl,w(5),"* @return EqualsBuilder - used to chain calls.",nl,w(5),"*/"),nl,w(4),M(39,[],[],$(pu,_,T(6),_,I("append"),P(sh," lhs, ",sh," rhs"),_,B(nl,w(8),i,_,P("isEquals == ",L("false")),_,B(nl,w(12),r,_,t,";",nl,w(8)),nl,w(8),"isEquals = ",P("lhs == rhs"),";",nl,w(8),r,_,t,";",nl,w(4)))),nl,nl,w(4),O("/**",nl,w(5),"* &lt;p>Test if two &lt;code>char&lt;/code>s are equal.&lt;/p>",nl,w(5),"*",nl,w(5),"* @param lhs  the left hand &lt;code>char&lt;/code>",nl,w(5),"* @param rhs  the right hand &lt;code>char&lt;/code>",nl,w(5),"* @return EqualsBuilder - used to chain calls.",nl,w(5),"*/"),nl,w(4),M(40,[],[],$(pu,_,T(6),_,I("append"),P(ch," lhs, ",ch," rhs"),_,B(nl,w(8),i,_,P("isEquals == ",L("false")),_,B(nl,w(12),r,_,t,";",nl,w(8)),nl,w(8),"isEquals = ",P("lhs == rhs"),";",nl,w(8),r,_,t,";",nl,w(4)))),nl,nl,w(4),O("/**",nl,w(5),"* &lt;p>Test if two &lt;code>byte&lt;/code>s are equal.&lt;/p>",nl,w(5),"*",nl,w(5),"* @param lhs  the left hand &lt;code>byte&lt;/code>",nl,w(5),"* @param rhs  the right hand &lt;code>byte&lt;/code>",nl,w(5),"* @return EqualsBuilder - used to chain calls.",nl,w(5),"*/"),nl,w(4),M(41,[],[],$(pu,_,T(6),_,I("append"),P(by," lhs, ",by," rhs"),_,B(nl,w(8),i,_,P("isEquals == ",L("false")),_,B(nl,w(12),r,_,t,";",nl,w(8)),nl,w(8),"isEquals = ",P("lhs == rhs"),";",nl,w(8),r,_,t,";",nl,w(4)))),nl,nl,w(4),O("/**",nl,w(5),"* &lt;p>Test if two &lt;code>double&lt;/code>s are equal by testing that the",nl,w(5),"* pattern of bits returned by &lt;code>doubleToLong&lt;/code> are equal.&lt;/p>",nl,w(5),"*",nl,w(5),"* &lt;p>This handles NaNs, Infinities, and &lt;code>-0.0&lt;/code>.&lt;/p>",nl,w(5),"*",nl,w(5),"* &lt;p>It is compatible with the hash code generated by",nl,w(5),"* &lt;code>HashCodeBuilder&lt;/code>.&lt;/p>",nl,w(5),"*",nl,w(5),"* @param lhs  the left hand &lt;code>double&lt;/code>",nl,w(5),"* @param rhs  the right hand &lt;code>double&lt;/code>",nl,w(5),"* @return EqualsBuilder - used to chain calls.",nl,w(5),"*/"),nl,w(4),M(42,[],[],$(pu,_,T(6),_,I("append"),P(db," lhs, ",db," rhs"),_,B(nl,w(8),i,_,P("isEquals == ",L("false")),_,B(nl,w(12),r,_,t,";",nl,w(8)),nl,w(8),r,_,N(37),P(T(15),".",N(43),P("lhs"),", ",T(15),".",N(43),P("rhs")),";",nl,w(4)))),nl,nl,w(4),O("/**",nl,w(5),"* &lt;p>Test if two &lt;code>float&lt;/code>s are equal byt testing that the",nl,w(5),"* pattern of bits returned by doubleToLong are equal.&lt;/p>",nl,w(5),"*",nl,w(5),"* &lt;p>This handles NaNs, Infinities, and &lt;code>-0.0&lt;/code>.&lt;/p>",nl,w(5),"*",nl,w(5),"* &lt;p>It is compatible with the hash code generated by",nl,w(5),"* &lt;code>HashCodeBuilder&lt;/code>.&lt;/p>",nl,w(5),"*",nl,w(5),"* @param lhs  the left hand &lt;code>float&lt;/code>",nl,w(5),"* @param rhs  the right hand &lt;code>float&lt;/code>",nl,w(5),"* @return EqualsBuilder - used to chain calls.",nl,w(5),"*/"),nl,w(4),M(44,[],[],$(pu,_,T(6),_,I("append"),P(fl," lhs, ",fl," rhs"),_,B(nl,w(8),i,_,P("isEquals == ",L("false")),_,B(nl,w(12),r,_,t,";",nl,w(8)),nl,w(8),r,_,N(38),P(T(16),".",N(45),P("lhs"),", ",T(16),".",N(45),P("rhs")),";",nl,w(4)))),nl,nl,w(4),O("/**",nl,w(5),"* &lt;p>Test if two &lt;code>booleans&lt;/code>s are equal.&lt;/p>",nl,w(5),"*",nl,w(5),"* @param lhs  the left hand &lt;code>boolean&lt;/code>",nl,w(5),"* @param rhs  the right hand &lt;code>boolean&lt;/code>",nl,w(5),"* @return EqualsBuilder - used to chain calls.",nl,w(6),"*/"),nl,w(4),M(46,[],[],$(pu,_,T(6),_,I("append"),P(b," lhs, ",b," rhs"),_,B(nl,w(8),i,_,P("isEquals == ",L("false")),_,B(nl,w(12),r,_,t,";",nl,w(8)),nl,w(8),"isEquals = ",P("lhs == rhs"),";",nl,w(8),r,_,t,";",nl,w(4)))),nl,nl,w(4),O("/**",nl,w(5),"* &lt;p>Performs a deep comparison of two &lt;code>Object&lt;/code> arrays.&lt;/p>",nl,w(5),"*",nl,w(5),"* &lt;p>This also will be called for the top level of",nl,w(5),"* multi-dimensional, ragged, and multi-typed arrays.&lt;/p>",nl,w(5),"*",nl,w(5),"* @param lhs  the left hand &lt;code>Object[]&lt;/code>",nl,w(5),"* @param rhs  the right hand &lt;code>Object[]&lt;/code>",nl,w(5),"* @return EqualsBuilder - used to chain calls.",nl,w(5),"*/"),nl,w(4),M(36,[],[],$(pu,_,T(6),_,I("append"),P(V(31,$(T(8),"[] ",I("lhs"))),", ",V(32,$(T(8),"[] ",I("rhs")))),_,B(nl,w(8),i,_,P("isEquals == ",L("false")),_,B(nl,w(12),r,_,t,";",nl,w(8)),nl,w(8),i,_,P(W(31)," == ",W(32)),_,B(nl,w(12),r,_,t,";",nl,w(8)),nl,w(8),i,_,P(W(31)," == ",L("null")," || ",W(32)," == ",L("null")),_,B(nl,w(12),t,".",N(24),P(L("false")),";",nl,w(12),r,_,t,";",nl,w(8)),nl,w(8),i,_,P(W(31),".length != ",W(32),".length"),_,B(nl,w(12),t,".",N(24),P(L("false")),";",nl,w(12),r,_,t,";",nl,w(8)),nl,w(8),fo,_,P(j," i = ",L("0"),"; i &lt; ",W(31),".length &amp;&amp; isEquals; ++i"),_,B(nl,w(12),N(20),P(W(31),"[i], ",W(32),"[i]"),";",nl,w(8)),nl,w(8),r,_,t,";",nl,w(4)))),nl,nl,w(4),O("/**",nl,w(5),"* &lt;p>Deep comparison of array of &lt;code>long&lt;/code>. Length and all",nl,w(5),"* values are compared.&lt;/p>",nl,w(5),"*",nl,w(5),"* &lt;p>The method {@link #append(long, long)} is used.&lt;/p>",nl,w(5),"*",nl,w(5),"* @param lhs  the left hand &lt;code>long[]&lt;/code>",nl,w(5),"* @param rhs  the right hand &lt;code>long[]&lt;/code>",nl,w(5),"* @return EqualsBuilder - used to chain calls.",nl,w(5),"*/"),nl,w(4),M(28,[],[],$(pu,_,T(6),_,I("append"),P(V(33,$(l,"[] ",I("lhs"))),", ",V(34,$(l,"[] ",I("rhs")))),_,B(nl,w(8),i,_,P("isEquals == ",L("false")),_,B(nl,w(12),r,_,t,";",nl,w(8)),nl,w(8),i,_,P(W(33)," == ",W(34)),_,B(nl,w(12),r,_,t,";",nl,w(8)),nl,w(8),i,_,P(W(33)," == ",L("null")," || ",W(34)," == ",L("null")),_,B(nl,w(12),t,".",N(24),P(L("false")),";",nl,w(12),r,_,t,";",nl,w(8)),nl,w(8),i,_,P(W(33),".length != ",W(34),".length"),_,B(nl,w(12),t,".",N(24),P(L("false")),";",nl,w(12),r,_,t,";",nl,w(8)),nl,w(8),fo,_,P(j," i = ",L("0"),"; i &lt; ",W(33),".length &amp;&amp; isEquals; ++i"),_,B(nl,w(12),N(37),P(W(33),"[i], ",W(34),"[i]"),";",nl,w(8)),nl,w(8),r,_,t,";",nl,w(4)))),nl,nl,w(4),O("/**",nl,w(5),"* &lt;p>Deep comparison of array of &lt;code>int&lt;/code>. Length and all",nl,w(5),"* values are compared.&lt;/p>",nl,w(5),"*",nl,w(5),"* &lt;p>The method {@link #append(int, int)} is used.&lt;/p>",nl,w(5),"*",nl,w(5),"* @param lhs  the left hand &lt;code>int[]&lt;/code>",nl,w(5),"* @param rhs  the right hand &lt;code>int[]&lt;/code>",nl,w(5),"* @return EqualsBuilder - used to chain calls.",nl,w(5),"*/"),nl,w(4),M(29,[],[],$(pu,_,T(6),_,I("append"),P(V(35,$(j,"[] ",I("lhs"))),", ",V(36,$(j,"[] ",I("rhs")))),_,B(nl,w(8),i,_,P("isEquals == ",L("false")),_,B(nl,w(12),r,_,t,";",nl,w(8)),nl,w(8),i,_,P(W(35)," == ",W(36)),_,B(nl,w(12),r,_,t,";",nl,w(8)),nl,w(8),i,_,P(W(35)," == ",L("null")," || ",W(36)," == ",L("null")),_,B(nl,w(12),t,".",N(24),P(L("false")),";",nl,w(12),r,_,t,";",nl,w(8)),nl,w(8),i,_,P(W(35),".length != ",W(36),".length"),_,B(nl,w(12),t,".",N(24),P(L("false")),";",nl,w(12),r,_,t,";",nl,w(8)),nl,w(8),fo,_,P(j," i = ",L("0"),"; i &lt; ",W(35),".length &amp;&amp; isEquals; ++i"),_,B(nl,w(12),N(38),P(W(35),"[i], ",W(36),"[i]"),";",nl,w(8)),nl,w(8),r,_,t,";",nl,w(4)))),nl,nl,w(4),O("/**",nl,w(5),"* &lt;p>Deep comparison of array of &lt;code>short&lt;/code>. Length and all",nl,w(5),"* values are compared.&lt;/p>",nl,w(5),"*",nl,w(5),"* &lt;p>The method {@link #append(short, short)} is used.&lt;/p>",nl,w(5),"*",nl,w(5),"* @param lhs  the left hand &lt;code>short[]&lt;/code>",nl,w(5),"* @param rhs  the right hand &lt;code>short[]&lt;/code>",nl,w(5),"* @return EqualsBuilder - used to chain calls.",nl,w(5),"*/"),nl,w(4),M(30,[],[],$(pu,_,T(6),_,I("append"),P(V(37,$(sh,"[] ",I("lhs"))),", ",V(38,$(sh,"[] ",I("rhs")))),_,B(nl,w(8),i,_,P("isEquals == ",L("false")),_,B(nl,w(12),r,_,t,";",nl,w(8)),nl,w(8),i,_,P(W(37)," == ",W(38)),_,B(nl,w(12),r,_,t,";",nl,w(8)),nl,w(8),i,_,P(W(37)," == ",L("null")," || ",W(38)," == ",L("null")),_,B(nl,w(12),t,".",N(24),P(L("false")),";",nl,w(12),r,_,t,";",nl,w(8)),nl,w(8),i,_,P(W(37),".length != ",W(38),".length"),_,B(nl,w(12),t,".",N(24),P(L("false")),";",nl,w(12),r,_,t,";",nl,w(8)),nl,w(8),fo,_,P(j," i = ",L("0"),"; i &lt; ",W(37),".length &amp;&amp; isEquals; ++i"),_,B(nl,w(12),N(39),P(W(37),"[i], ",W(38),"[i]"),";",nl,w(8)),nl,w(8),r,_,t,";",nl,w(4)))),nl,nl,w(4),O("/**",nl,w(5),"* &lt;p>Deep comparison of array of &lt;code>char&lt;/code>. Length and all",nl,w(5),"* values are compared.&lt;/p>",nl,w(5),"*",nl,w(5),"* &lt;p>The method {@link #append(char, char)} is used.&lt;/p>",nl,w(5),"*",nl,w(5),"* @param lhs  the left hand &lt;code>char[]&lt;/code>",nl,w(5),"* @param rhs  the right hand &lt;code>char[]&lt;/code>",nl,w(5),"* @return EqualsBuilder - used to chain calls.",nl,w(5),"*/"),nl,w(4),M(31,[],[],$(pu,_,T(6),_,I("append"),P(V(39,$(ch,"[] ",I("lhs"))),", ",V(40,$(ch,"[] ",I("rhs")))),_,B(nl,w(8),i,_,P("isEquals == ",L("false")),_,B(nl,w(12),r,_,t,";",nl,w(8)),nl,w(8),i,_,P(W(39)," == ",W(40)),_,B(nl,w(12),r,_,t,";",nl,w(8)),nl,w(8),i,_,P(W(39)," == ",L("null")," || ",W(40)," == ",L("null")),_,B(nl,w(12),t,".",N(24),P(L("false")),";",nl,w(12),r,_,t,";",nl,w(8)),nl,w(8),i,_,P(W(39),".length != ",W(40),".length"),_,B(nl,w(12),t,".",N(24),P(L("false")),";",nl,w(12),r,_,t,";",nl,w(8)),nl,w(8),fo,_,P(j," i = ",L("0"),"; i &lt; ",W(39),".length &amp;&amp; isEquals; ++i"),_,B(nl,w(12),N(40),P(W(39),"[i], ",W(40),"[i]"),";",nl,w(8)),nl,w(8),r,_,t,";",nl,w(4)))),nl,nl,w(4),O("/**",nl,w(5),"* &lt;p>Deep comparison of array of &lt;code>byte&lt;/code>. Length and all",nl,w(5),"* values are compared.&lt;/p>",nl,w(5),"*",nl,w(5),"* &lt;p>The method {@link #append(byte, byte)} is used.&lt;/p>",nl,w(5),"*",nl,w(5),"* @param lhs  the left hand &lt;code>byte[]&lt;/code>",nl,w(5),"* @param rhs  the right hand &lt;code>byte[]&lt;/code>",nl,w(5),"* @return EqualsBuilder - used to chain calls.",nl,w(5),"*/"),nl,w(4),M(32,[],[],$(pu,_,T(6),_,I("append"),P(V(41,$(by,"[] ",I("lhs"))),", ",V(42,$(by,"[] ",I("rhs")))),_,B(nl,w(8),i,_,P("isEquals == ",L("false")),_,B(nl,w(12),r,_,t,";",nl,w(8)),nl,w(8),i,_,P(W(41)," == ",W(42)),_,B(nl,w(12),r,_,t,";",nl,w(8)),nl,w(8),i,_,P(W(41)," == ",L("null")," || ",W(42)," == ",L("null")),_,B(nl,w(12),t,".",N(24),P(L("false")),";",nl,w(12),r,_,t,";",nl,w(8)),nl,w(8),i,_,P(W(41),".length != ",W(42),".length"),_,B(nl,w(12),t,".",N(24),P(L("false")),";",nl,w(12),r,_,t,";",nl,w(8)),nl,w(8),fo,_,P(j," i = ",L("0"),"; i &lt; ",W(41),".length &amp;&amp; isEquals; ++i"),_,B(nl,w(12),N(41),P(W(41),"[i], ",W(42),"[i]"),";",nl,w(8)),nl,w(8),r,_,t,";",nl,w(4)))),nl,nl,w(4),O("/**",nl,w(5),"* &lt;p>Deep comparison of array of &lt;code>double&lt;/code>. Length and all",nl,w(5),"* values are compared.&lt;/p>",nl,w(5),"*",nl,w(5),"* &lt;p>The method {@link #append(double, double)} is used.&lt;/p>",nl,w(5),"*",nl,w(5),"* @param lhs  the left hand &lt;code>double[]&lt;/code>",nl,w(5),"* @param rhs  the right hand &lt;code>double[]&lt;/code>",nl,w(5),"* @return EqualsBuilder - used to chain calls.",nl,w(5),"*/"),nl,w(4),M(33,[],[],$(pu,_,T(6),_,I("append"),P(V(43,$(db,"[] ",I("lhs"))),", ",V(44,$(db,"[] ",I("rhs")))),_,B(nl,w(8),i,_,P("isEquals == ",L("false")),_,B(nl,w(12),r,_,t,";",nl,w(8)),nl,w(8),i,_,P(W(43)," == ",W(44)),_,B(nl,w(12),r,_,t,";",nl,w(8)),nl,w(8),i,_,P(W(43)," == ",L("null")," || ",W(44)," == ",L("null")),_,B(nl,w(12),t,".",N(24),P(L("false")),";",nl,w(12),r,_,t,";",nl,w(8)),nl,w(8),i,_,P(W(43),".length != ",W(44),".length"),_,B(nl,w(12),t,".",N(24),P(L("false")),";",nl,w(12),r,_,t,";",nl,w(8)),nl,w(8),fo,_,P(j," i = ",L("0"),"; i &lt; ",W(43),".length &amp;&amp; isEquals; ++i"),_,B(nl,w(12),N(42),P(W(43),"[i], ",W(44),"[i]"),";",nl,w(8)),nl,w(8),r,_,t,";",nl,w(4)))),nl,nl,w(4),O("/**",nl,w(5),"* &lt;p>Deep comparison of array of &lt;code>float&lt;/code>. Length and all",nl,w(5),"* values are compared.&lt;/p>",nl,w(5),"*",nl,w(5),"* &lt;p>The method {@link #append(float, float)} is used.&lt;/p>",nl,w(5),"*",nl,w(5),"* @param lhs  the left hand &lt;code>float[]&lt;/code>",nl,w(5),"* @param rhs  the right hand &lt;code>float[]&lt;/code>",nl,w(5),"* @return EqualsBuilder - used to chain calls.",nl,w(5),"*/"),nl,w(4),M(34,[],[],$(pu,_,T(6),_,I("append"),P(V(45,$(fl,"[] ",I("lhs"))),", ",V(46,$(fl,"[] ",I("rhs")))),_,B(nl,w(8),i,_,P("isEquals == ",L("false")),_,B(nl,w(12),r,_,t,";",nl,w(8)),nl,w(8),i,_,P(W(45)," == ",W(46)),_,B(nl,w(12),r,_,t,";",nl,w(8)),nl,w(8),i,_,P(W(45)," == ",L("null")," || ",W(46)," == ",L("null")),_,B(nl,w(12),t,".",N(24),P(L("false")),";",nl,w(12),r,_,t,";",nl,w(8)),nl,w(8),i,_,P(W(45),".length != ",W(46),".length"),_,B(nl,w(12),t,".",N(24),P(L("false")),";",nl,w(12),r,_,t,";",nl,w(8)),nl,w(8),fo,_,P(j," i = ",L("0"),"; i &lt; ",W(45),".length &amp;&amp; isEquals; ++i"),_,B(nl,w(12),N(44),P(W(45),"[i], ",W(46),"[i]"),";",nl,w(8)),nl,w(8),r,_,t,";",nl,w(4)))),nl,nl,w(4),O("/**",nl,w(5),"* &lt;p>Deep comparison of array of &lt;code>boolean&lt;/code>. Length and all",nl,w(5),"* values are compared.&lt;/p>",nl,w(5),"*",nl,w(5),"* &lt;p>The method {@link #append(boolean, boolean)} is used.&lt;/p>",nl,w(5),"*",nl,w(5),"* @param lhs  the left hand &lt;code>boolean[]&lt;/code>",nl,w(5),"* @param rhs  the right hand &lt;code>boolean[]&lt;/code>",nl,w(5),"* @return EqualsBuilder - used to chain calls.",nl,w(5),"*/"),nl,w(4),M(35,[],[],$(pu,_,T(6),_,I("append"),P(V(47,$(b,"[] ",I("lhs"))),", ",V(48,$(b,"[] ",I("rhs")))),_,B(nl,w(8),i,_,P("isEquals == ",L("false")),_,B(nl,w(12),r,_,t,";",nl,w(8)),nl,w(8),i,_,P(W(47)," == ",W(48)),_,B(nl,w(12),r,_,t,";",nl,w(8)),nl,w(8),i,_,P(W(47)," == ",L("null")," || ",W(48)," == ",L("null")),_,B(nl,w(12),t,".",N(24),P(L("false")),";",nl,w(12),r,_,t,";",nl,w(8)),nl,w(8),i,_,P(W(47),".length != ",W(48),".length"),_,B(nl,w(12),t,".",N(24),P(L("false")),";",nl,w(12),r,_,t,";",nl,w(8)),nl,w(8),fo,_,P(j," i = ",L("0"),"; i &lt; ",W(47),".length &amp;&amp; isEquals; ++i"),_,B(nl,w(12),N(46),P(W(47),"[i], ",W(48),"[i]"),";",nl,w(8)),nl,w(8),r,_,t,";",nl,w(4)))),nl,nl,w(4),O("/**",nl,w(5),"* &lt;p>Returns &lt;code>true&lt;/code> if the fields that have been checked",nl,w(5),"* are all equal.&lt;/p>",nl,w(5),"*",nl,w(5),"* @return boolean",nl,w(5),"*/"),nl,w(4),M(10,[],[],$(pu,_,b,_,I("isEquals"),P(),_,B(nl,w(8),r,_,t,".isEquals;",nl,w(4)))),nl,nl,w(4),O("/**",nl,w(5),"* Sets the &lt;code>isEquals&lt;/code> value.",nl,w(5),"* ",nl,w(5),"* @param isEquals The value to set.",nl,w(5),"* @since 2.1",nl,w(5),"*/"),nl,w(4),M(24,[],[],$(po,_,v,_,I("setEquals"),P(b," isEquals"),_,B(nl,w(8),t,".isEquals = isEquals;",nl,w(4)))),nl))),nl);}});
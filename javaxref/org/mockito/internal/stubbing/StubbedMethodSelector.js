defineStructure(
"StubbedMethodSelector",function(factory){with(factory) { typeTable(["org.mockito.Mockito","cl"],["org.mockito.internal.stubbing.StubbedMethodSelector","it"],["org.mockito.internal.MockHandler$VoidMethodStubbableImpl$0$0","cl"]),methodTable([1,"on",[],"me"],[2,"on",[],"me"]),localVariableTable()
return classDef(O("/*",nl," * Copyright (c) 2007 Mockito contributors",nl," * This program is made available under the terms of the MIT License.",nl," */"),nl,pa," org.mockito.internal.stubbing;",nl,nl,ip," org.mockito.",T(0),";",nl,nl,O("/**",nl," * Chooses void method for stubbing with throwable. E.g:",nl," * ",nl," * &lt;pre>",nl," * stubVoid(mock).toThrow(new RuntimeException()).on().someMethod(\"some arg\");",nl," * &lt;/pre>",nl," * ",nl," * See examples in javadoc for {@link Mockito#stubVoid}",nl," */"),nl,C(1,[2],$(pu,_,it,_,I("StubbedMethodSelector"),"&lt;T> ",B(nl,nl,w(4),O("/**",nl,w(5),"* Choose void method for stubbing with throwable. E.g:",nl,w(5),"* ",nl,w(5),"* &lt;pre>",nl,w(5),"* stubVoid(mock).toThrow(new RuntimeException()).on().someMethod(\"some arg\");",nl,w(5),"* &lt;/pre>",nl,w(5),"* ",nl,w(5),"* If throwable is a checked exception then it has to match one of the",nl,w(5),"* checked exceptions of method signature.",nl,w(5),"* &lt;p>",nl,w(5),"* See examples in javadoc for {@link Mockito#stubVoid}",nl,w(5),"* ",nl,w(5),"* @return mock object itself",nl,w(5),"*/"),nl,w(4),M(0,[],[1],$("T ",I("on"),P(),";")),nl))));}});
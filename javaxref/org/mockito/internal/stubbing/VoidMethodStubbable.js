defineStructure(
"VoidMethodStubbable",function(factory){with(factory) { typeTable(["org.mockito.Mockito","cl"],["org.mockito.internal.stubbing.VoidMethodStubbable","it"],["org.mockito.internal.MockHandler$VoidMethodStubbableImpl","cl"],["java.lang.Throwable","cl"],["org.mockito.internal.stubbing.StubbedMethodSelector","it"]),methodTable([1,"toThrow",[3],"me"],[2,"toThrow",[3],"me"]),localVariableTable(["throwable","toThrow(java.lang.Throwable)-throwable"])
return classDef(O("/*",nl," * Copyright (c) 2007 Mockito contributors",nl," * This program is made available under the terms of the MIT License.",nl," */"),nl,pa," org.mockito.internal.stubbing;",nl,nl,ip," org.mockito.",T(0),";",nl,nl,O("/**",nl," * Stubs void method with an exception. E.g:",nl," * ",nl," * &lt;pre>",nl," * stubVoid(mock).toThrow(new RuntimeException()).on().someMethod();",nl," * &lt;/pre>",nl," * ",nl," * See examples in javadoc for {@link Mockito#stubVoid}",nl," */"),nl,C(1,[2],$(pu,_,it,_,I("VoidMethodStubbable"),"&lt;T> ",B(nl,nl,w(4),O("/**",nl,w(5),"* Stubs void method with an exception. E.g:",nl,w(5),"* ",nl,w(5),"* &lt;pre>",nl,w(5),"* stubVoid(mock).toThrow(new RuntimeException()).on().someMethod();",nl,w(5),"* &lt;/pre>",nl,w(5),"* ",nl,w(5),"* If throwable is a checked exception then it has to ",nl,w(5),"* match one of the checked exceptions of method signature.",nl,w(5),"* ",nl,w(5),"* See examples in javadoc for {@link Mockito#stubVoid}",nl,w(5),"* ",nl,w(5),"* @param throwable",nl,w(5),"*",w(12),"to be thrown on method invocation",nl,w(5),"* ",nl,w(5),"* @return method selector - to choose void method and finish stubbing ",nl,w(5),"*/"),nl,w(4),M(0,[],[1],$(T(4),"&lt;T> ",I("toThrow"),P(V(0,$(T(3),_,I("throwable")))),";")),nl,nl))));}});
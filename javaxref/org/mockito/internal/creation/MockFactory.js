defineStructure(
"MockFactory",function(factory){with(factory) { typeTable(["java.lang.reflect.Modifier","cl"],["java.util.List","it"],["net.sf.cglib.core.CollectionUtils","cl"],["net.sf.cglib.core.VisibilityPredicate","cl"],["net.sf.cglib.proxy.Callback","it"],["net.sf.cglib.proxy.Enhancer","cl"],["net.sf.cglib.proxy.Factory","it"],["org.mockito.exceptions.Reporter","cl"],["org.mockito.internal.creation.MockFactory","cl"],["java.lang.Class","cl"],["org.mockito.internal.creation.MethodInterceptorFilter","cl"],["java.lang.SuppressWarnings","an"],["java.lang.Object","cl"],["org.mockito.internal.creation.MockFactory$0$0","cl"],["java.util.Collection","it"],["net.sf.cglib.core.Predicate","it"],["org.mockito.internal.creation.ObjenesisClassInstantiator","cl"],["java.lang.InstantiationException","cl"],["java.lang.RuntimeException","cl"],["java.lang.String","cl"],["java.lang.System","cl"]),methodTable([8,"createMock",[9,10],"me"],[8,"validateClass",[9],"me"],[8,"createEnhancer",[9],"me"],[5,"setCallbackType",[9],"me"],[12,"getClass",[],"me"],[5,"createClass",[],"me"],[5,"registerCallbacks",[9,"net.sf.cglib.proxy.Callback[]"],"st me"],[8,"createMock",[9],"me"],[10,"setMock",[12],"me"],[0,"isFinal",["int"],"st me"],[9,"getModifiers",[],"me"],[7,"Reporter",[],"co"],[7,"cannotMockFinalClass",[9],"me"],[13,"filterConstructors",[9,1],"me"],[5,"filterConstructors",[9,1],"me"],[2,"filter",[14,15],"st me"],[3,"VisibilityPredicate",[9,"boolean"],"co"],[9,"isInterface",[],"me"],[5,"setInterfaces",["java.lang.Class[]"],"me"],[5,"setSuperclass",[9],"me"],[16,"newInstance",[9],"st me"],[18,"RuntimeException",[19],"co"],[20,"getProperty",[19],"st me"],[6,"getCallback",["int"],"me"]),localVariableTable(["toMock","createMock(java.lang.Class,org.mockito.internal.creation.MethodInterceptorFilter)-toMock"],["filter","createMock(java.lang.Class,org.mockito.internal.creation.MethodInterceptorFilter)-filter"],["enhancer","createMock(java.lang.Class,org.mockito.internal.creation.MethodInterceptorFilter)-enhancer"],["mockClass","createMock(java.lang.Class,org.mockito.internal.creation.MethodInterceptorFilter)-mockClass"],["mock","createMock(java.lang.Class,org.mockito.internal.creation.MethodInterceptorFilter)-mock"],["toMock","validateClass(java.lang.Class)-toMock"],["toMock","createEnhancer(java.lang.Class)-toMock"],["sc","~$1-filterConstructors(java.lang.Class,java.util.List)-sc"],["constructors","~$1-filterConstructors(java.lang.Class,java.util.List)-constructors"],["enhancer","createEnhancer(java.lang.Class)-enhancer"],["mockClass","createMock(java.lang.Class)-mockClass"],["mock","createMock(java.lang.Class)-mock"],["e","createMock(java.lang.Class)-e"])
return classDef(O("/*",nl," * Copyright (c) 2007 Mockito contributors",nl," * This program is made available under the terms of the MIT License.",nl," */"),nl,pa," org.mockito.internal.creation;",nl,nl,ip," java.lang.reflect.",T(0),";",nl,ip," java.util.",T(1),";",nl,nl,ip," net.sf.cglib.core.",T(2),";",nl,ip," net.sf.cglib.core.",T(3),";",nl,ip," net.sf.cglib.proxy.",T(4),";",nl,ip," net.sf.cglib.proxy.",T(5),";",nl,ip," net.sf.cglib.proxy.",T(6),";",nl,nl,ip," org.mockito.exceptions.",T(7),";",nl,nl,O("/**",nl," * Factory generating a mock for a class.",nl," */"),nl,C(8,[],$(pu,_,c,_,I("MockFactory"),"&lt;T> ",B(nl,nl,w(4),M(0,[],[],$("@",T(11),P(L("\"unchecked\"")),nl,w(4),pu," T ",I("createMock"),P(V(0,$(T(9),"&lt;T> ",I("toMock"))),", ",V(1,$(f,_,T(10),_,I("filter")))),_,B(nl,w(8),N(1),P(W(0)),";",nl,w(8),V(2,$(T(5),_,I("enhancer")," = ",N(2),P(W(0)),";")),nl,w(8),W(2),".",N(3),P(W(1),".",N(4),P()),";",nl,nl,w(8),V(3,$(T(9),_,I("mockClass")," = ",W(2),".",N(5),P(),";")),nl,w(8),T(5),".",N(6),P(W(3),", ",n,_,T(4),"[] ",B(_,W(1),_)),";",nl,nl,w(8),V(4,$(T(6),_,I("mock")," = ",N(7),P(W(3)),";")),nl,nl,w(8),W(1),".",N(8),P(W(4)),";",nl,w(8),r,_,P("T"),_,W(4),";",nl,w(4)))),nl,nl,w(4),M(1,[],[],$(pi,_,v,_,I("validateClass"),P(V(5,$(T(9),"&lt;T> ",I("toMock")))),_,B(nl,w(8),i,_,P(T(0),".",N(9),P(W(5),".",N(10),P())),_,B(nl,w(12),n,_,N(11),P(),".",N(12),P(W(5)),";",nl,w(8)),nl,w(4)))),nl,nl,w(4),M(2,[],[],$(pi,_,T(5),_,I("createEnhancer"),P(V(6,$(T(9),"&lt;T> ",I("toMock")))),_,B(nl,w(8),V(9,$(T(5),_,I("enhancer")," = ",n,_,T(5),P(),_,B(C(13,[],$(nl,w(12),M(13,[14],[],$("@",T(11),P(L("\"unchecked\"")),nl,w(12),O("//Filter all private constructors but do not check that there are some left"),nl,w(12),po,_,v,_,I("filterConstructors"),P(V(7,$(T(9),_,I("sc"))),", ",V(8,$(T(1),_,I("constructors")))),_,B(nl,w(16),T(2),".",N(15),P(W(8),", ",n,_,N(16),P(nl,w(24),W(7),", ",L("true"))),";",nl,w(12)))),nl,w(8)))),";")),nl,nl,w(8),i,_,P(W(6),".",N(17),P()),_,B(nl,w(12),W(9),".",N(18),P(n,_,T(9),"[] ",B(_,W(6),_)),";",nl,w(8)),_,e,_,B(nl,w(12),W(9),".",N(19),P(W(6)),";",nl,w(8)),nl,w(8),r,_,W(9),";",nl,w(4)))),nl,nl,w(4),M(7,[],[],$(pi,_,T(6),_,I("createMock"),P(V(10,$(T(9),"&lt;?> ",I("mockClass")))),_,B(nl,w(8),V(11,$(T(6),_,I("mock"),";")),nl,w(8),tr,_,B(nl,w(12),W(11)," = ",P(T(6)),_,T(16),".",N(20),P(W(10)),";",nl,w(8)),_,ct,_,P(V(12,$(T(17),_,I("e")))),_,B(nl,w(12),tw,_,n,_,N(21),P(L("\"Fail to instantiate mock for \"")," + ",W(10),nl,w(20),"+ ",L("\" on \"")," + ",T(20),".",N(22),P(L("\"java.vm.vendor\""))," + ",L("\" JVM\"")),";",nl,w(8)),nl,nl,w(8),O("// This call is required. Cglib has some \"magic code\" making sure a"),nl,w(8),O("// callback is used by only one instance of a given class. So only the"),nl,w(8),O("// instance created right after registering the callback will get it."),nl,w(8),O("// However, this is done in the construtor which I'm bypassing to"),nl,w(8),O("// allow class instantiation without calling a constructor."),nl,w(8),O("// Fortunatly, the \"magic code\" is also called in getCallback which is"),nl,w(8),O("// why I'm calling it here mock.getCallback(0);"),nl,nl,w(8),W(11),".",N(23),P(L("0")),";",nl,w(8),r,_,W(11),";",nl,w(4)))),nl))));}});
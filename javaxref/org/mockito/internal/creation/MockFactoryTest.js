defineStructure(
"MockFactoryTest",function(factory){with(factory) { typeTable(["net.sf.cglib.proxy.Factory","it"],["org.junit.Test","an"],["org.mockito.TestBase","cl"],["org.mockito.internal.creation.MockFactoryTest","cl"],["java.lang.SuppressWarnings","an"],["java.lang.Exception","cl"],["org.mockito.internal.creation.MockFactory","cl"],["org.mockito.internal.creation.MockFactoryTest$SomeInterface","st it"],["java.lang.Class","cl"],["org.mockito.internal.creation.MethodInterceptorFilter","cl"],["org.mockito.internal.creation.MockFactoryTest$MockAwareStub","cl"],["java.lang.Object","cl"],["junit.framework.Assert","cl"],["org.mockito.internal.creation.MockFactoryTest$ClassWithoutConstructor","cl"],["org.mockito.internal.creation.MockFactoryTest$ClassWithDodgyConstructor","cl"],["org.mockito.internal.creation.MockFactoryTest$SomeClass","cl"],["java.lang.RuntimeException","cl"]),methodTable([3,"shouldCreateMockFromInterface",[],"me"],[6,"MockFactory",[],"co"],[6,"createMock",[8,9],"me"],[10,"MockAwareStub",[],"co"],[11,"getClass",[],"me"],[8,"getSuperclass",[],"me"],[12,"assertEquals",[11,11],"st me"],[3,"shouldCreateMockFromClass",[],"me"],[3,"shouldCreateMockFromClassEvenWhenConstructorIsDodgy",[],"me"],[14,"ClassWithDodgyConstructor",[],"co"],[12,"fail",[],"st me"],[12,"assertNotNull",[11],"st me"],[3,"shouldMocksHaveDifferentInterceptors",[],"me"],[12,"assertNotSame",[11,11],"st me"],[0,"getCallback",["int"],"me"],[16,"RuntimeException",[],"co"],[10,"setMock",[11],"me"],[9,"setMock",[11],"me"]),localVariableTable(["factory","shouldCreateMockFromInterface()-factory"],["proxy","shouldCreateMockFromInterface()-proxy"],["superClass","shouldCreateMockFromInterface()-superClass"],["factory","shouldCreateMockFromClass()-factory"],["proxy","shouldCreateMockFromClass()-proxy"],["superClass","shouldCreateMockFromClass()-superClass"],["e","shouldCreateMockFromClassEvenWhenConstructorIsDodgy()-e"],["factory","shouldCreateMockFromClassEvenWhenConstructorIsDodgy()-factory"],["mock","shouldCreateMockFromClassEvenWhenConstructorIsDodgy()-mock"],["factory","shouldMocksHaveDifferentInterceptors()-factory"],["mockOne","shouldMocksHaveDifferentInterceptors()-mockOne"],["mockTwo","shouldMocksHaveDifferentInterceptors()-mockTwo"],["cglibFactoryOne","shouldMocksHaveDifferentInterceptors()-cglibFactoryOne"],["cglibFactoryTwo","shouldMocksHaveDifferentInterceptors()-cglibFactoryTwo"],["mock","~MockAwareStub-setMock(java.lang.Object)-mock"])
return classDef(O("/*",nl," * Copyright (c) 2007 Mockito contributors",nl," * This program is made available under the terms of the MIT License.",nl," */"),nl,pa," org.mockito.internal.creation;",nl,nl,ip," net.sf.cglib.proxy.",T(0),";",nl,nl,ip," org.junit.",T(1),";",nl,ip," org.mockito.",T(2),";",nl,nl,C(3,[],$("@",T(4),P(L("\"unchecked\"")),nl,pu,_,c,_,I("MockFactoryTest"),_,ex,_,T(2),_,B(nl,nl,w(4),M(0,[],[],$("@",T(1),nl,w(4),pu,_,v,_,I("shouldCreateMockFromInterface"),P(),_,ts,_,T(5),_,B(nl,w(8),V(0,$(T(6),"&lt;",T(7),"> ",I("factory")," = ",n,_,N(1),P(),";")),nl,w(8),V(1,$(T(7),_,I("proxy")," = ",W(0),".",N(2),P(T(7),".",c,", ",n,_,N(3),P()),";")),nl,w(8),nl,w(8),V(2,$(T(8),_,I("superClass")," = ",W(1),".",N(4),P(),".",N(5),P(),";")),nl,w(8),N(6),P(T(11),".",c,", ",W(2)),";",nl,w(4)))),nl,w(4),nl,w(4),M(7,[],[],$("@",T(1),nl,w(4),pu,_,v,_,I("shouldCreateMockFromClass"),P(),_,ts,_,T(5),_,B(nl,w(8),V(3,$(T(6),"&lt;",T(13),"> ",I("factory")," = ",n,_,N(1),P(),";")),nl,w(8),V(4,$(T(13),_,I("proxy")," = ",W(3),".",N(2),P(T(13),".",c,", ",n,_,N(3),P()),";")),nl,w(8),nl,w(8),V(5,$(T(8),_,I("superClass")," = ",W(4),".",N(4),P(),".",N(5),P(),";")),nl,w(8),N(6),P(T(13),".",c,", ",W(5)),";",nl,w(4)))),nl,w(4),nl,w(4),M(8,[],[],$("@",T(1),nl,w(4),pu,_,v,_,I("shouldCreateMockFromClassEvenWhenConstructorIsDodgy"),P(),_,ts,_,T(5),_,B(nl,w(8),tr,_,B(nl,w(12),n,_,N(9),P(),";",nl,w(12),N(10),P(),";",nl,w(8)),_,ct,_,P(V(6,$(T(5),_,I("e")))),_,B(),nl,w(8),nl,w(8),V(7,$(T(6),"&lt;",T(14),"> ",I("factory")," = ",n,_,N(1),P(),";")),nl,w(8),V(8,$(T(14),_,I("mock")," = ",W(7),".",N(2),P(T(14),".",c,", ",n,_,N(3),P()),";")),nl,w(8),N(11),P(W(8)),";",nl,w(4)))),nl,w(4),nl,w(4),M(12,[],[],$("@",T(1)," ",nl,w(4),pu,_,v,_,I("shouldMocksHaveDifferentInterceptors"),P(),_,ts,_,T(5),_,B(nl,w(8),V(9,$(T(6),"&lt;",T(15),"> ",I("factory")," = ",n,_,N(1),P(),";")),nl,w(8),V(10,$(T(15),_,I("mockOne")," = ",W(9),".",N(2),P(T(15),".",c,", ",n,_,N(3),P()),";")),nl,w(8),V(11,$(T(15),_,I("mockTwo")," = ",W(9),".",N(2),P(T(15),".",c,", ",n,_,N(3),P()),";")),nl,w(8),nl,w(8),V(12,$(T(0),_,I("cglibFactoryOne")," = ",P(T(0)),_,W(10),";")),nl,w(8),V(13,$(T(0),_,I("cglibFactoryTwo")," = ",P(T(0)),_,W(11),";")),nl,w(8),nl,w(8),N(13),P(W(12),".",N(14),P(L("0")),", ",W(13),".",N(14),P(L("0"))),";",nl,w(4)))),nl,w(4),nl,w(4),C(7,[],$(pi,_,it,_,I("SomeInterface"),_,B())),";",nl,nl,w(4),C(15,[],$(pi,_,c,_,I("SomeClass"),_,B())),";",nl,w(4),C(13,[],$(pi,_,c,_,I("ClassWithoutConstructor"),_,B())),";",nl,w(4),nl,w(4),C(14,[],$(pi,_,c,_,I("ClassWithDodgyConstructor"),_,B(nl,w(8),M(9,[],[],$(pu," ClassWithDodgyConstructor",P(),_,B(nl,w(12),tw,_,n,_,N(15),P(),";",nl,w(8)))),nl,w(4)))),";",nl,w(4),nl,w(4),C(10,[],$(pi,_,f,_,c,_,I("MockAwareStub"),_,ex,_,T(9),_,B(nl,w(8),M(3,[],[],$(pu," MockAwareStub",P(),_,B(nl,w(12),su,P(T(11),".",c,", ",L("null")),";",nl,w(8)))),nl,nl,w(8),M(16,[17],[],$(pu,_,v,_,I("setMock"),P(V(14,$(T(11),_,I("mock")))),_,B())),nl,w(4)))),nl))));}});
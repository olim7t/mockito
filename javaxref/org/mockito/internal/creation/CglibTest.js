defineStructure(
"CglibTest",function(factory){with(factory) { typeTable(["java.lang.reflect.Method","cl"],["java.util.ArrayList","cl"],["net.sf.cglib.proxy.Callback","it"],["net.sf.cglib.proxy.Enhancer","cl"],["net.sf.cglib.proxy.Factory","it"],["net.sf.cglib.proxy.MethodInterceptor","it"],["net.sf.cglib.proxy.MethodProxy","cl"],["org.junit.Test","an"],["org.mockito.TestBase","cl"],["org.mockito.internal.creation.CglibTest","cl"],["java.lang.Exception","cl"],["junit.framework.Assert","cl"],["java.lang.Object","cl"],["java.lang.SuppressWarnings","an"],["org.mockito.internal.creation.CglibTest$0$0","cl"],["java.lang.Throwable","cl"],["java.lang.Class","cl"],["org.mockito.internal.creation.ObjenesisClassInstantiator","cl"]),methodTable([9,"shouldCallbacksBeDifferent",[],"me"],[9,"createMock",[],"me"],[11,"assertNotSame",[12,12],"st me"],[4,"getCallback",["int"],"me"],[14,"intercept",[12,0,"java.lang.Object[]",6],"me"],[5,"intercept",[12,0,"java.lang.Object[]",6],"me"],[6,"invokeSuper",[12,"java.lang.Object[]"],"me"],[3,"Enhancer",[],"co"],[3,"setSuperclass",[16],"me"],[3,"setCallbackType",[16],"me"],[3,"createClass",[],"me"],[3,"registerCallbacks",[16,"net.sf.cglib.proxy.Callback[]"],"st me"],[17,"newInstance",[16],"st me"]),localVariableTable(["f1","shouldCallbacksBeDifferent()-f1"],["f2","shouldCallbacksBeDifferent()-f2"],["obj","~$1-intercept(java.lang.Object,java.lang.reflect.Method,java.lang.Object[],net.sf.cglib.proxy.MethodProxy)-obj"],["method","~$1-intercept(java.lang.Object,java.lang.reflect.Method,java.lang.Object[],net.sf.cglib.proxy.MethodProxy)-method"],["args","~$1-intercept(java.lang.Object,java.lang.reflect.Method,java.lang.Object[],net.sf.cglib.proxy.MethodProxy)-args"],["proxy","~$1-intercept(java.lang.Object,java.lang.reflect.Method,java.lang.Object[],net.sf.cglib.proxy.MethodProxy)-proxy"],["interceptor","createMock()-interceptor"],["enhancer","createMock()-enhancer"],["mockClass","createMock()-mockClass"],["f","createMock()-f"])
return classDef(O("/*",nl," * Copyright (c) 2007 Mockito contributors",nl," * This program is made available under the terms of the MIT License.",nl," */"),nl,pa," org.mockito.internal.creation;",nl,nl,ip," java.lang.reflect.",T(0),";",nl,ip," java.util.",T(1),";",nl,nl,ip," net.sf.cglib.proxy.",T(2),";",nl,ip," net.sf.cglib.proxy.",T(3),";",nl,ip," net.sf.cglib.proxy.",T(4),";",nl,ip," net.sf.cglib.proxy.",T(5),";",nl,ip," net.sf.cglib.proxy.",T(6),";",nl,nl,ip," org.junit.",T(7),";",nl,ip," org.mockito.",T(8),";",nl,nl,O("/**",nl," * This test case is used to make sure that the way cglib is used is providing the expected behavior.",nl," */"),nl,C(9,[],$(pu,_,c,_,I("CglibTest"),_,ex,_,T(8),_,B(nl,nl,w(4),O("/**",nl,w(5),"* Check that an interceptor is used by only one instance of a class",nl,w(5),"* @throws Exception.",nl,w(5),"*/"),nl,w(4),M(0,[],[],$("@",T(7)," ",nl,w(4),pu,_,v,_,I("shouldCallbacksBeDifferent"),P(),_,ts,_,T(10),_,B(nl,w(8),V(0,$(T(4),_,I("f1")," = ",N(1),P(),";")),nl,w(8),V(1,$(T(4),_,I("f2")," = ",N(1),P(),";")),nl,w(8),nl,w(8),N(2),P(W(0),".",N(3),P(L("0")),", ",W(1),".",N(3),P(L("0"))),";",nl,w(4)))),nl,nl,w(4),M(1,[],[],$("@",T(13),P(L("\"unchecked\"")),nl,w(4),pi,_,T(4),_,I("createMock"),P(),_,ts,_,T(10),_,B(nl,w(8),V(6,$(T(5),_,I("interceptor")," = ",n,_,T(5),P(),_,B(C(14,[],$(nl,w(12),M(4,[5],[],$(pu,_,T(12),_,I("intercept"),P(V(2,$(T(12),_,I("obj"))),", ",V(3,$(T(0),_,I("method"))),", ",V(4,$(T(12),"[] ",I("args"))),",",nl,w(20),V(5,$(T(6),_,I("proxy")))),_,ts,_,T(15),_,B(nl,w(16),r,_,W(5),".",N(6),P(W(2),", ",W(4)),";",nl,w(12)))),nl,w(8)))),";")),nl,nl,w(8),V(7,$(T(3),_,I("enhancer")," = ",n,_,N(7),P(),";")),nl,w(8),W(7),".",N(8),P(T(1),".",c),";",nl,w(8),W(7),".",N(9),P(T(5),".",c),";",nl,w(8),nl,w(8),V(8,$(T(16),_,I("mockClass")," = ",W(7),".",N(10),P(),";")),nl,w(8),nl,w(8),T(3),".",N(11),P(W(8),", ",n,_,T(2),"[] ",B(_,W(6),_)),";",nl,w(16),nl,w(8),V(9,$(T(4),_,I("f")," = ",P(T(4)),_,T(17),".",N(12),P(W(8)),";")),nl,w(8),nl,w(8),W(9),".",N(3),P(L("0")),";",nl,w(8),nl,w(8),r,_,W(9),";",nl,w(4)))),nl))),nl);}});